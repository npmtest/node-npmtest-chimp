{"/home/travis/build/npmtest/node-npmtest-chimp/test.js":"/* istanbul instrument in package npmtest_chimp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chimp/lib.npmtest_chimp.js":"/* istanbul instrument in package npmtest_chimp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chimp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chimp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chimp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chimp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chimp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chimp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chimp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chimp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chimp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chimp.__dirname + '/lib.npmtest_chimp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/chimp.js":"'use strict';\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Externals\n */\nvar async = require('async'),\n    path = require('path'),\n    chokidar = require('chokidar'),\n    _ = require('underscore'),\n    log = require('./log'),\n    freeport = require('freeport'),\n    DDPClient = require('xolvio-ddp'),\n    fs = require('fs'),\n    Hapi = require('hapi'),\n    AutoupdateWatcher = require('./ddp-watcher'),\n    colors = require('colors'),\n    booleanHelper = require('./boolean-helper'),\n    Versions = require('../lib/versions');\n\ncolors.enabled = true;\nvar DEFAULT_COLOR = 'yellow';\n\n/**\n * Internals\n */\nexports.Mocha = require('./mocha/mocha.js');\nexports.Jasmine = require('./jasmine/jasmine.js');\nexports.Cucumber = require('./cucumberjs/cucumber.js');\nexports.Phantom = require('./phantom.js');\nexports.Chromedriver = require('./chromedriver.js');\nexports.Consoler = require('./consoler.js');\nexports.Selenium = require('./selenium.js');\nexports.SimianReporter = require('./simian-reporter.js');\n\n/**\n * Exposes the binary path\n *\n * @api public\n */\nChimp.bin = path.resolve(__dirname, path.join('..', 'bin', 'chimp'));\n\nChimp.install = function (callback) {\n  log.debug('[chimp]', 'Installing dependencies');\n  new exports.Selenium({ port: '1' }).install(callback);\n};\n\n/**\n * Chimp Constructor\n *\n * Options:\n *    - `browser` browser to run tests in\n *\n * @param {Object} options\n * @api public\n */\nfunction Chimp(options) {\n\n  this.chokidar = chokidar;\n  this.options = options || {};\n  this.processes = [];\n  this.isInterrupting = false;\n  this.exec = require('child_process').exec;\n  this.fs = fs;\n  this.testRunnerRunOrder = [];\n  this.watcher = undefined;\n\n  // store all cli parameters in env hash\n  // Note: Environment variables are always strings.\n  for (var option in options) {\n    if (option === 'ddp') {\n      handleDdpOption(options);\n    } else {\n      process.env['chimp.' + option] = _.isObject(options[option]) ? (0, _stringify2.default)(options[option]) : String(options[option]);\n    }\n  }\n\n  this._handleChimpInterrupt();\n}\n\nfunction handleDdpOption(options) {\n  if (typeof options.ddp === 'string') {\n    process.env['chimp.ddp0'] = String(options.ddp);\n    return;\n  }\n  if (Array.isArray(options.ddp)) {\n    options.ddp.forEach(function (val, index) {\n      process.env['chimp.ddp' + index] = String(val);\n    });\n  }\n}\n\n/**\n * Runs an npm install then calls selectMode\n *\n * @param {Function} callback\n * @api public\n */\nChimp.prototype.init = function (callback) {\n  var self = this;\n\n  this.informUser();\n\n  try {\n    this._initSimianResultBranch();\n    this._initSimianBuildNumber();\n  } catch (error) {\n    callback(error);\n    return;\n  }\n\n  if (this.options.versions || this.options.debug) {\n    var versions = new Versions(this.options);\n    if (this.options.debug) {\n      versions.show(function () {\n        self.selectMode(callback);\n      });\n    } else {\n      versions.show();\n    }\n  } else {\n    self.selectMode(callback);\n  }\n};\n\nChimp.prototype.informUser = function () {\n\n  if (this.options.showXolvioMessages) {\n    log.info('\\nMaster Chimp and become a testing Ninja! Check out our course: '.green + 'http://bit.ly/2btQaFu\\n'.blue.underline);\n  }\n\n  if (booleanHelper.isTruthy(this.options.criticalSteps)) {\n    this.options.e2eSteps = this.options.criticalSteps;\n    log.warn('[chimp] Please use e2eSteps instead of criticalSteps. criticalSteps is now deprecated.'.red);\n  }\n\n  if (booleanHelper.isTruthy(this.options.criticalTag)) {\n    this.options.e2eTags = this.options.criticalTag;\n    log.warn('[chimp] Please use e2eTags instead of criticalTag. criticalTag is now deprecated.'.red);\n  }\n\n  if (booleanHelper.isTruthy(this.options.mochaTags) || booleanHelper.isTruthy(this.options.mochaGrep) || booleanHelper.isTruthy(this.options.mochaTimeout) || booleanHelper.isTruthy(this.options.mochaReporter) || booleanHelper.isTruthy(this.options.mochaSlow)) {\n    log.warn('[chimp] mochaXYZ style configs are now deprecated. Please use a mochaConfig object.'.red);\n  }\n};\n\nChimp.prototype._initSimianResultBranch = function () {\n  // Automatically set the result branch for the common CI tools\n  if (this.options.simianAccessToken && this.options.simianResultBranch === null) {\n    if (booleanHelper.isTruthy(process.env.CI_BRANCH)) {\n      // Codeship or custom\n      this.options.simianResultBranch = process.env.CI_BRANCH;\n    } else if (booleanHelper.isTruthy(process.env.CIRCLE_BRANCH)) {\n      // CircleCI\n      this.options.simianResultBranch = process.env.CIRCLE_BRANCH;\n    } else if (booleanHelper.isTruthy(process.env.TRAVIS_BRANCH)) {\n      // TravisCI\n      if (booleanHelper.isFalsey(process.env.TRAVIS_PULL_REQUEST)) {\n        this.options.simianResultBranch = process.env.TRAVIS_BRANCH;\n      } else {\n        // Ignore the builds that simulate the pull request merge,\n        // because the branch will be the target branch.\n        this.options.simianResultBranch = false;\n      }\n    } else {\n      throw new Error('You have not specified the branch that should be reported to Simian!' + ' Do this with the --simianResultBranch argument' + ' or the CI_BRANCH environment variable.');\n    }\n  }\n};\n\nChimp.prototype._initSimianBuildNumber = function _initSimianBuildNumber() {\n  // Automatically set the result branch for the common CI tools\n  if (this.options.simianAccessToken) {\n    if (process.env.CI_BUILD_NUMBER) {\n      // Codeship or custom\n      this.options.simianBuildNumber = process.env.CI_BUILD_NUMBER;\n    } else if (process.env.CIRCLE_BUILD_NUM) {\n      // CircleCI\n      this.options.simianBuildNumber = process.env.CIRCLE_BUILD_NUM;\n    } else if (process.env.TRAVIS_BUILD_NUMBER) {\n      // TravisCI\n      this.options.simianBuildNumber = process.env.TRAVIS_BUILD_NUMBER;\n    }\n  }\n};\n\n/**\n * Decides which mode to run and kicks it off\n *\n * @param {Function} callback\n * @api public\n */\nChimp.prototype.selectMode = function (callback) {\n\n  if (booleanHelper.isTruthy(this.options.watch)) {\n    this.watch();\n  } else if (booleanHelper.isTruthy(this.options.server)) {\n    this.server();\n  } else {\n    this.run(callback);\n  }\n};\n\n/**\n * Watches the file system for changes and reruns when it detects them\n *\n * @api public\n */\nChimp.prototype.watch = function () {\n\n  var self = this;\n\n  var watchDirectories = [];\n  if (self.options.watchSource) {\n    watchDirectories = self.options.watchSource.split(',');\n  }\n\n  if (self.options.e2eSteps) {\n    watchDirectories.push(self.options.e2eSteps);\n  }\n\n  if (self.options.domainSteps) {\n    watchDirectories.push(self.options.domainSteps);\n  }\n\n  watchDirectories.push(self.options.path);\n\n  this.watcher = chokidar.watch(watchDirectories, {\n    ignored: /[\\/\\\\](\\.|node_modules)/,\n    persistent: true,\n    usePolling: this.options.watchWithPolling\n  });\n\n  // set cucumber tags to be watch based\n  if (booleanHelper.isTruthy(self.options.watchTags)) {\n    self.options.tags = self.options.watchTags;\n  }\n\n  if (booleanHelper.isTruthy(self.options.ddp)) {\n    var autoUpdateWatcher = new AutoupdateWatcher(self.options);\n    autoUpdateWatcher.watch(function () {\n      log.debug('[chimp] Meteor autoupdate detected');\n      self.rerun();\n    });\n  }\n\n  // wait for initial file scan to complete\n  this.watcher.once('ready', function () {\n\n    var watched = [];\n    if (_.isArray(self.options.watchTags)) {\n      _.each(self.options.watchTags, function (watchTag) {\n        watched.push(watchTag.split(','));\n      });\n    } else if (_.isString(self.options.watchTags)) {\n      watched.push(self.options.watchTags.split(','));\n    }\n    log.info(('[chimp] Watching features with tagged with ' + watched.join()).white);\n\n    // start watching\n    self.watcher.on('all', function (event, path) {\n\n      // removing feature files should not rerun\n      if (event === 'unlink' && path.match(/\\.feature$/)) {\n        return;\n      }\n\n      log.debug('[chimp] file changed');\n      self.rerun();\n    });\n\n    log.debug('[chimp] watcher ready, running for the first time');\n    self.rerun();\n  });\n};\n\n/**\n * Starts a chimp server on a freeport or on options.serverPort if provided\n *\n * @api public\n */\nChimp.prototype.server = function () {\n  var self = this;\n  if (!this.options.serverPort) {\n    freeport(function (error, port) {\n      if (error) {\n        throw error;\n      }\n      self._startServer(port);\n    });\n  } else {\n    self._startServer(this.options.serverPort);\n  }\n};\n\nChimp.prototype._startServer = function (port) {\n\n  var server = new Hapi.Server();\n\n  server.connection({\n    host: this.options.serverHost,\n    port: port,\n    routes: { timeout: { server: false, socket: false } }\n  });\n\n  this._setupRoutes(server);\n\n  server.start();\n\n  log.info('[chimp] Chimp server is running on port', port, process.env['chimp.ddp']);\n\n  if (booleanHelper.isTruthy(this.options.ddp)) {\n    this._handshakeOverDDP();\n  }\n};\n\nChimp.prototype._handshakeOverDDP = function () {\n  var ddp = new DDPClient({\n    host: process.env['chimp.ddp'].match(/http:\\/\\/(.*):/)[1],\n    port: process.env['chimp.ddp'].match(/:([0-9]+)/)[1],\n    ssl: false,\n    autoReconnect: true,\n    autoReconnectTimer: 500,\n    maintainCollections: true,\n    ddpVersion: '1',\n    useSockJs: true\n  });\n  ddp.connect(function (error) {\n    if (error) {\n      log.error('[chimp] Error handshaking via DDP');\n      throw error;\n    }\n  }).then(function () {\n    log.debug('[chimp] Handshaking with DDP server');\n    ddp.call('handshake').then(function () {\n      log.debug('[chimp] Handshake complete, closing DDP connection');\n      ddp.close();\n    });\n  });\n};\n\nChimp.prototype._parseResult = function (res) {\n  // FIXME this is shitty, there's got to be a nicer way to deal with variable async chains\n  var cucumberResults = res[1][1] ? res[1][1] : res[1][0];\n  if (!cucumberResults) {\n    log.error('[chimp] Could not get Cucumber Results from run result:');\n    log.error(res);\n  }\n  log.debug('[chimp] Responding to /run request with:');\n  log.debug(cucumberResults);\n  return cucumberResults;\n};\n\nChimp.prototype._setupRoutes = function (server) {\n  var self = this;\n  server.route({\n    method: 'GET',\n    path: '/run',\n    handler: function handler(request, reply) {\n      self.rerun(function (err, res) {\n        var cucumberResults = self._parseResult(res);\n        reply(cucumberResults).header('Content-Type', 'application/json');\n      });\n    }\n  });\n  server.route({\n    method: 'GET',\n    path: '/run/{absolutePath*}',\n    handler: function handler(request, reply) {\n      /// XXX is there a more elegant way we can do this?\n      self.options._[2] = request.params.absolutePath;\n      self.rerun(function (err, res) {\n        var cucumberResults = self._parseResult(res);\n        reply(cucumberResults).header('Content-Type', 'application/json');\n      });\n    }\n  });\n  server.route({\n    method: 'GET',\n    path: '/interrupt',\n    handler: function handler(request, reply) {\n      self.interrupt(function (err, res) {\n        reply('done').header('Content-Type', 'application/json');\n      });\n    }\n  });\n  server.route({\n    method: 'GET',\n    path: '/runAll',\n    handler: function handler(request, reply) {\n      self.options._tags = self.options.tags;\n      self.options.tags = '~@ignore';\n      self.rerun(function (err, res) {\n        self.options.tags = self.options._tags;\n        var cucumberResults = self._parseResult(res);\n        reply(cucumberResults).header('Content-Type', 'application/json');\n      });\n    }\n  });\n};\n\n/**\n * Starts servers and runs specs\n *\n * @api public\n */\nChimp.prototype.run = function (callback) {\n\n  log.info('\\n[chimp] Running...'[DEFAULT_COLOR]);\n\n  var self = this;\n\n  function getJsonCucumberResults(result) {\n    var startProcessesIndex = 1;\n    if (!result || !result[startProcessesIndex]) {\n      return [];\n    }\n\n    var jsonResult = '[]';\n    _.any(['domain', 'e2e', 'generic'], function (type) {\n      var _testRunner = _.findWhere(self.testRunnerRunOrder, { name: 'cucumber', type: type });\n      if (_testRunner) {\n        jsonResult = result[startProcessesIndex][_testRunner.index];\n        return true;\n      }\n    });\n    return JSON.parse(jsonResult);\n  }\n\n  async.series([self.interrupt.bind(self), self._startProcesses.bind(self), self.interrupt.bind(self)], function (error, result) {\n    if (error) {\n      log.debug('[chimp] run complete with errors', error);\n      if (booleanHelper.isFalsey(self.options.watch)) {\n        self.interrupt(function () {});\n      }\n    } else {\n      log.debug('[chimp] run complete');\n    }\n\n    if (self.options.simianAccessToken && self.options.simianResultBranch !== false) {\n      var jsonCucumberResult = getJsonCucumberResults(result);\n      var simianReporter = new exports.SimianReporter(self.options);\n      simianReporter.report(jsonCucumberResult, function () {\n        callback(error, result);\n      });\n    } else {\n      callback(error, result);\n    }\n  });\n};\n\n/**\n * Interrupts any running specs in the reverse order. This allows cucumber to shut down first\n * before webdriver servers, otherwise we can get test errors in the console\n *\n * @api public\n */\nChimp.prototype.interrupt = function (callback) {\n\n  log.debug('[chimp] interrupting');\n\n  var self = this;\n\n  self.isInterrupting = true;\n\n  if (!self.processes || self.processes.length === 0) {\n    self.isInterrupting = false;\n    log.debug('[chimp] no processes to interrupt');\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n\n  log.debug('[chimp]', self.processes.length, 'processes to interrupt');\n\n  var reverseProcesses = [];\n  while (self.processes.length !== 0) {\n    reverseProcesses.push(self.processes.pop());\n  }\n\n  var processes = _.collect(reverseProcesses, function (process) {\n    return process.interrupt.bind(process);\n  });\n\n  async.series(processes, function (error, r) {\n    self.isInterrupting = false;\n    log.debug('[chimp] Finished interrupting processes');\n    if (error) {\n      log.error('[chimp] with errors', error);\n    }\n    if (callback) {\n      callback.apply(this, arguments);\n    }\n  });\n};\n\n/**\n * Combines the interrupt and run methods and latches calls\n *\n * @api public\n */\nChimp.prototype.rerun = function (callback) {\n\n  log.debug('[chimp] rerunning');\n\n  var self = this;\n\n  if (self.isInterrupting) {\n    log.debug('[chimp] interrupt in progress, ignoring rerun');\n    return;\n  }\n\n  self.run(function (err, res) {\n    if (callback) {\n      callback(err, res);\n    }\n    log.debug('[chimp] finished rerun');\n  });\n};\n\n/**\n * Starts processes in series\n *\n * @api private\n */\nChimp.prototype._startProcesses = function (callback) {\n\n  var self = this;\n\n  self.processes = self._createProcesses();\n\n  var processes = _.collect(self.processes, function (process) {\n    return process.start.bind(process);\n  });\n\n  // pushing at least one processes guarantees the series below runs\n  processes.push(function (callback) {\n    log.debug('[chimp] Finished running async processes');\n    callback();\n  });\n\n  async.series(processes, function (err, res) {\n    if (err) {\n      self.isInterrupting = false;\n      log.debug('[chimp] Finished running async processes with errors');\n    }\n    callback(err, res);\n  });\n};\n\n/**\n * Creates the correct sequence of servers needed prior to running cucumber\n *\n * @api private\n */\nChimp.prototype._createProcesses = function () {\n\n  var processes = [];\n  var self = this;\n\n  var addTestRunnerToRunOrder = function addTestRunnerToRunOrder(name, type) {\n    self.testRunnerRunOrder.push({ name: name, type: type, index: processes.length - 1 });\n  };\n\n  var userHasNotProvidedSeleniumHost = function userHasNotProvidedSeleniumHost() {\n    return booleanHelper.isFalsey(self.options.host);\n  };\n\n  var userHasProvidedBrowser = function userHasProvidedBrowser() {\n    return booleanHelper.isTruthy(self.options.browser);\n  };\n\n  if (!this.options.domainOnly) {\n    if (this.options.browser === 'phantomjs') {\n      process.env['chimp.host'] = this.options.host = 'localhost';\n      var phantom = new exports.Phantom(this.options);\n      processes.push(phantom);\n    } else if (userHasProvidedBrowser() && userHasNotProvidedSeleniumHost()) {\n      process.env['chimp.host'] = this.options.host = 'localhost';\n      var selenium = new exports.Selenium(this.options);\n      processes.push(selenium);\n    } else if (userHasNotProvidedSeleniumHost()) {\n      // rewrite the browser to be chrome since \"chromedriver\" is not a valid browser\n      process.env['chimp.browser'] = this.options.browser = 'chrome';\n      process.env['chimp.host'] = this.options.host = 'localhost';\n      var chromedriver = new exports.Chromedriver(this.options);\n      processes.push(chromedriver);\n    }\n  }\n\n  if (booleanHelper.isTruthy(this.options.mocha)) {\n    var mocha = new exports.Mocha(this.options);\n    processes.push(mocha);\n  } else if (booleanHelper.isTruthy(this.options.jasmine)) {\n    var jasmine = new exports.Jasmine(this.options);\n    processes.push(jasmine);\n  } else {\n    if (booleanHelper.isTruthy(this.options.e2eSteps) || booleanHelper.isTruthy(this.options.domainSteps)) {\n      // domain scenarios\n      if (booleanHelper.isTruthy(this.options.domainSteps)) {\n        var options = JSON.parse((0, _stringify2.default)(this.options));\n        if (options.r) {\n          options.r = _.isArray(options.r) ? options.r : [options.r];\n        } else {\n          options.r = [];\n        }\n        var message = '\\n[chimp] domain scenarios...';\n        options.r.push(options.domainSteps);\n\n        if (booleanHelper.isTruthy(options.fullDomain)) {\n          delete options.tags;\n        }\n\n        if (!this.options.domainOnly) {\n          processes.push(new exports.Consoler(message[DEFAULT_COLOR]));\n        }\n        processes.push(new exports.Cucumber(options));\n        addTestRunnerToRunOrder('cucumber', 'domain');\n        processes.push(new exports.Consoler(''));\n      }\n      if (booleanHelper.isTruthy(this.options.e2eSteps)) {\n        // e2e scenarios\n        var _options = JSON.parse((0, _stringify2.default)(this.options));\n        if (_options.r) {\n          _options.r = _.isArray(_options.r) ? _options.r : [_options.r];\n        } else {\n          _options.r = [];\n        }\n\n        _options.tags = _options.tags.split(',');\n        _options.tags.push(_options.e2eTags);\n        _options.tags = _options.tags.join();\n\n        var _message = '\\n[chimp] ' + _options.e2eTags + ' scenarios ...';\n        _options.r.push(_options.e2eSteps);\n        processes.push(new exports.Consoler(_message[DEFAULT_COLOR]));\n        processes.push(new exports.Cucumber(_options));\n        addTestRunnerToRunOrder('cucumber', 'e2e');\n        processes.push(new exports.Consoler(''));\n      }\n    } else {\n      var cucumber = new exports.Cucumber(this.options);\n      processes.push(cucumber);\n      addTestRunnerToRunOrder('cucumber', 'generic');\n    }\n  }\n\n  return processes;\n};\n\n/**\n * Uses process.kill wen interrupted by Meteor so that Selenium shuts down correctly for node 0.10.x\n *\n * @api private\n */\nChimp.prototype._handleChimpInterrupt = function () {\n  var self = this;\n  process.on('SIGINT', function () {\n    log.debug('[chimp] SIGINT detected, killing process');\n    process.stdin.end();\n    self.interrupt();\n    if (booleanHelper.isTruthy(self.options.watch)) {\n      self.watcher.close();\n    }\n  });\n};\n\nmodule.exports = Chimp;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/log.js":"'use strict';\n\nvar log = require('loglevel'),\n    minimist = require('minimist');\n\nvar argv = minimist(process.argv, {\n  'default': {\n    'debug': false,\n    'log': 'info'\n  }, 'boolean': true\n}) || [];\n\nvar debug = process.env['chimp.debug'] === 'true' ? true : process.env['chimp.debug'] === 'false' ? false : process.env['chimp.debug'] || process.env.DEBUG === 'true' || process.env.DEBUG === '1' || argv.debug;\n\nif (debug) {\n  log.setLevel('debug');\n} else {\n  log.setLevel(argv.log);\n}\nmodule.exports = log;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/ddp-watcher.js":"'use strict';\n\n// taken from https://github.com/timbotnik/meteor-autoupdate-watcher\n\nvar DDPClient = require('xolvio-ddp'),\n    _ = require('underscore'),\n    URL = require('url'),\n    log = require('./log');\n\nvar AutoupdateWatcher = function AutoupdateWatcher(options) {\n  this.options = options;\n  this._url = this._getUrl(options.ddp);\n  this._currentVersions = {};\n  this._lastRerun = 0;\n  this._autoupdateCollection = {};\n  this._ddpClient = null;\n};\n\nAutoupdateWatcher.prototype._getUrl = function (ddpHost) {\n  if (ddpHost instanceof Array) {\n    ddpHost = ddpHost[0];\n  }\n  if (ddpHost.indexOf('http://') === -1 && ddpHost.indexOf('https://') === -1) {\n    throw new Error('[chimp][ddp] DDP url must contain the protocol');\n  }\n  return URL.parse(ddpHost);\n};\n\nAutoupdateWatcher.prototype._triggerRerun = function () {\n  var self = this;\n  var now = new Date().getTime();\n  if (now - self._lastRerun > 1000) {\n    // debounce this since we always see multiple version records change around the same time\n    // actually rerun here...\n    self._lastRerun = now;\n    self._trigger();\n  }\n};\n\nAutoupdateWatcher.prototype._didUpdateVersion = function (doc) {\n  var self = this;\n  var versionType;\n  var versionKey;\n  if (doc._id.match(/version/) === null) {\n    versionType = 'version-server';\n    versionKey = '_id';\n  } else {\n    versionType = doc._id;\n    versionKey = 'version';\n  }\n  var prevVersion = self._currentVersions[versionType];\n  var newVersion = doc[versionKey];\n  var isUpdated = prevVersion && prevVersion !== newVersion;\n  if (isUpdated) {\n    log.debug('[chimp][ddp-watcher] New ' + versionType + ': ' + newVersion);\n  }\n  self._currentVersions[versionType] = newVersion;\n  return isUpdated;\n};\n\nAutoupdateWatcher.prototype._checkForUpdate = function () {\n  var self = this;\n  var observedAutoupdate = false;\n  _.each(self._autoupdateCollection, function (doc) {\n    if (!observedAutoupdate && self._didUpdateVersion(doc)) {\n      observedAutoupdate = true;\n    }\n  });\n\n  if (observedAutoupdate) {\n    self._triggerRerun();\n  }\n};\n\nAutoupdateWatcher.prototype.watch = function (trigger) {\n  var self = this;\n  self._trigger = trigger;\n  self._ddpClient = new DDPClient({\n    // All properties optional, defaults shown\n    host: this._url.hostname,\n    port: this._url.port,\n    ssl: this._url.protocol === 'https:',\n    path: this._url.pathname !== '/' ? this._url.pathname + '/websocket' : undefined,\n    autoReconnect: true,\n    autoReconnectTimer: 500,\n    maintainCollections: true,\n    ddpVersion: '1',\n    useSockJs: this._url.pathname === '/'\n  });\n\n  /*\n   * Observe the autoupdate collection.\n   */\n  var observer = self._ddpClient.observe('meteor_autoupdate_clientVersions');\n  observer.added = function (id) {\n    log.debug('[chimp][ddp-watcher] ADDED to ' + observer.name + ':  ' + id);\n  };\n  observer.changed = function (id, oldFields, clearedFields, newFields) {\n    log.debug('[chimp][ddp-watcher] CHANGED in ' + observer.name + ':  ' + id);\n    log.debug('[chimp][ddp-watcher] CHANGED old field values: ', oldFields);\n    log.debug('[chimp][ddp-watcher] CHANGED cleared fields: ', clearedFields);\n    log.debug('[chimp][ddp-watcher] CHANGED new fields: ', newFields);\n    if (self._didUpdateVersion(self._autoupdateCollection[id])) {\n      self._triggerRerun();\n    }\n  };\n  observer.removed = function (id, oldValue) {\n    log.debug('[chimp][ddp-watcher] REMOVED in ' + observer.name + ':  ' + id);\n    log.debug('[chimp][ddp-watcher] REMOVED previous value: ', oldValue);\n  };\n  self._observer = observer;\n\n  /*\n   * Connect to the Meteor Server\n   */\n\n  self._ddpClient.connect(function (error, wasReconnect) {\n\n    // If autoReconnect is true, this callback will be invoked each time\n    // a server connection is re-established\n    if (error) {\n      log.error('[chimp][ddp-watcher] DDP connection error!', error);\n      self._isConnected = false;\n      return;\n    }\n    self._isConnected = true;\n\n    if (wasReconnect) {\n      log.debug('[chimp][ddp-watcher] Reconnected');\n    } else {\n      log.debug('[chimp][ddp-watcher] Connected');\n    }\n\n    // force a reset of 'maintained' collections\n    self._ddpClient.collections = {};\n\n    /*\n     * Subscribe to the Meteor Autoupdate Collection\n     */\n    self._subscriptionHandle = self._ddpClient.subscribe('meteor_autoupdate_clientVersions', [], function () {\n      // callback when the subscription is ready\n      self._autoupdateCollection = self._ddpClient.collections.meteor_autoupdate_clientVersions;\n      log.debug('[chimp][ddp-watcher] meteor_autoupdate_clientVersions ready:');\n      log.debug('[chimp][ddp-watcher] ' + self._autoupdateCollection);\n      self._checkForUpdate();\n    });\n  });\n};\n\nmodule.exports = AutoupdateWatcher;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/index.js":"var colors = require('./colors');\nmodule['exports'] = colors;\n\n// Remark: By default, colors will add style properties to String.prototype\n//\n// If you don't wish to extend String.prototype you can do this instead and native String will not be touched\n//\n//   var colors = require('colors/safe);\n//   colors.red(\"foo\")\n//\n//\nrequire('./extendStringPrototype')();","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/colors.js":"/*\n\nThe MIT License (MIT)\n\nOriginal Library \n  - Copyright (c) Marak Squires\n\nAdditional functionality\n - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar colors = {};\nmodule['exports'] = colors;\n\ncolors.themes = {};\n\nvar ansiStyles = colors.styles = require('./styles');\nvar defineProps = Object.defineProperties;\n\ncolors.supportsColor = require('./system/supports-colors');\n\nif (typeof colors.enabled === \"undefined\") {\n  colors.enabled = colors.supportsColor;\n}\n\ncolors.stripColors = colors.strip = function(str){\n  return (\"\" + str).replace(/\\x1B\\[\\d+m/g, '');\n};\n\n\nvar stylize = colors.stylize = function stylize (str, style) {\n  if (!colors.enabled) {\n    return str+'';\n  }\n\n  return ansiStyles[style].open + str + ansiStyles[style].close;\n}\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\nvar escapeStringRegexp = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return str.replace(matchOperatorsRe,  '\\\\$&');\n}\n\nfunction build(_styles) {\n  var builder = function builder() {\n    return applyStyle.apply(builder, arguments);\n  };\n  builder._styles = _styles;\n  // __proto__ is used because we must return a function, but there is\n  // no way to create a function with a different prototype.\n  builder.__proto__ = proto;\n  return builder;\n}\n\nvar styles = (function () {\n  var ret = {};\n  ansiStyles.grey = ansiStyles.gray;\n  Object.keys(ansiStyles).forEach(function (key) {\n    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n    ret[key] = {\n      get: function () {\n        return build(this._styles.concat(key));\n      }\n    };\n  });\n  return ret;\n})();\n\nvar proto = defineProps(function colors() {}, styles);\n\nfunction applyStyle() {\n  var args = arguments;\n  var argsLen = args.length;\n  var str = argsLen !== 0 && String(arguments[0]);\n  if (argsLen > 1) {\n    for (var a = 1; a < argsLen; a++) {\n      str += ' ' + args[a];\n    }\n  }\n\n  if (!colors.enabled || !str) {\n    return str;\n  }\n\n  var nestedStyles = this._styles;\n\n  var i = nestedStyles.length;\n  while (i--) {\n    var code = ansiStyles[nestedStyles[i]];\n    str = code.open + str.replace(code.closeRe, code.open) + code.close;\n  }\n\n  return str;\n}\n\nfunction applyTheme (theme) {\n  for (var style in theme) {\n    (function(style){\n      colors[style] = function(str){\n        if (typeof theme[style] === 'object'){\n          var out = str;\n          for (var i in theme[style]){\n            out = colors[theme[style][i]](out);\n          }\n          return out;\n        }\n        return colors[theme[style]](str);\n      };\n    })(style)\n  }\n}\n\ncolors.setTheme = function (theme) {\n  if (typeof theme === 'string') {\n    try {\n      colors.themes[theme] = require(theme);\n      applyTheme(colors.themes[theme]);\n      return colors.themes[theme];\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  } else {\n    applyTheme(theme);\n  }\n};\n\nfunction init() {\n  var ret = {};\n  Object.keys(styles).forEach(function (name) {\n    ret[name] = {\n      get: function () {\n        return build([name]);\n      }\n    };\n  });\n  return ret;\n}\n\nvar sequencer = function sequencer (map, str) {\n  var exploded = str.split(\"\"), i = 0;\n  exploded = exploded.map(map);\n  return exploded.join(\"\");\n};\n\n// custom formatter methods\ncolors.trap = require('./custom/trap');\ncolors.zalgo = require('./custom/zalgo');\n\n// maps\ncolors.maps = {};\ncolors.maps.america = require('./maps/america');\ncolors.maps.zebra = require('./maps/zebra');\ncolors.maps.rainbow = require('./maps/rainbow');\ncolors.maps.random = require('./maps/random')\n\nfor (var map in colors.maps) {\n  (function(map){\n    colors[map] = function (str) {\n      return sequencer(colors.maps[map], str);\n    }\n  })(map)\n}\n\ndefineProps(colors, init());","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/styles.js":"/*\nThe MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar styles = {};\nmodule['exports'] = styles;\n\nvar codes = {\n  reset: [0, 0],\n\n  bold: [1, 22],\n  dim: [2, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  hidden: [8, 28],\n  strikethrough: [9, 29],\n\n  black: [30, 39],\n  red: [31, 39],\n  green: [32, 39],\n  yellow: [33, 39],\n  blue: [34, 39],\n  magenta: [35, 39],\n  cyan: [36, 39],\n  white: [37, 39],\n  gray: [90, 39],\n  grey: [90, 39],\n\n  bgBlack: [40, 49],\n  bgRed: [41, 49],\n  bgGreen: [42, 49],\n  bgYellow: [43, 49],\n  bgBlue: [44, 49],\n  bgMagenta: [45, 49],\n  bgCyan: [46, 49],\n  bgWhite: [47, 49],\n\n  // legacy styles for colors pre v1.0.0\n  blackBG: [40, 49],\n  redBG: [41, 49],\n  greenBG: [42, 49],\n  yellowBG: [43, 49],\n  blueBG: [44, 49],\n  magentaBG: [45, 49],\n  cyanBG: [46, 49],\n  whiteBG: [47, 49]\n\n};\n\nObject.keys(codes).forEach(function (key) {\n  var val = codes[key];\n  var style = styles[key] = [];\n  style.open = '\\u001b[' + val[0] + 'm';\n  style.close = '\\u001b[' + val[1] + 'm';\n});","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/system/supports-colors.js":"/*\nThe MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar argv = process.argv;\n\nmodule.exports = (function () {\n  if (argv.indexOf('--no-color') !== -1 ||\n    argv.indexOf('--color=false') !== -1) {\n    return false;\n  }\n\n  if (argv.indexOf('--color') !== -1 ||\n    argv.indexOf('--color=true') !== -1 ||\n    argv.indexOf('--color=always') !== -1) {\n    return true;\n  }\n\n  if (process.stdout && !process.stdout.isTTY) {\n    return false;\n  }\n\n  if (process.platform === 'win32') {\n    return true;\n  }\n\n  if ('COLORTERM' in process.env) {\n    return true;\n  }\n\n  if (process.env.TERM === 'dumb') {\n    return false;\n  }\n\n  if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {\n    return true;\n  }\n\n  return false;\n})();","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/custom/trap.js":"module['exports'] = function runTheTrap (text, options) {\n  var result = \"\";\n  text = text || \"Run the trap, drop the bass\";\n  text = text.split('');\n  var trap = {\n    a: [\"\\u0040\", \"\\u0104\", \"\\u023a\", \"\\u0245\", \"\\u0394\", \"\\u039b\", \"\\u0414\"],\n    b: [\"\\u00df\", \"\\u0181\", \"\\u0243\", \"\\u026e\", \"\\u03b2\", \"\\u0e3f\"],\n    c: [\"\\u00a9\", \"\\u023b\", \"\\u03fe\"],\n    d: [\"\\u00d0\", \"\\u018a\", \"\\u0500\" , \"\\u0501\" ,\"\\u0502\", \"\\u0503\"],\n    e: [\"\\u00cb\", \"\\u0115\", \"\\u018e\", \"\\u0258\", \"\\u03a3\", \"\\u03be\", \"\\u04bc\", \"\\u0a6c\"],\n    f: [\"\\u04fa\"],\n    g: [\"\\u0262\"],\n    h: [\"\\u0126\", \"\\u0195\", \"\\u04a2\", \"\\u04ba\", \"\\u04c7\", \"\\u050a\"],\n    i: [\"\\u0f0f\"],\n    j: [\"\\u0134\"],\n    k: [\"\\u0138\", \"\\u04a0\", \"\\u04c3\", \"\\u051e\"],\n    l: [\"\\u0139\"],\n    m: [\"\\u028d\", \"\\u04cd\", \"\\u04ce\", \"\\u0520\", \"\\u0521\", \"\\u0d69\"],\n    n: [\"\\u00d1\", \"\\u014b\", \"\\u019d\", \"\\u0376\", \"\\u03a0\", \"\\u048a\"],\n    o: [\"\\u00d8\", \"\\u00f5\", \"\\u00f8\", \"\\u01fe\", \"\\u0298\", \"\\u047a\", \"\\u05dd\", \"\\u06dd\", \"\\u0e4f\"],\n    p: [\"\\u01f7\", \"\\u048e\"],\n    q: [\"\\u09cd\"],\n    r: [\"\\u00ae\", \"\\u01a6\", \"\\u0210\", \"\\u024c\", \"\\u0280\", \"\\u042f\"],\n    s: [\"\\u00a7\", \"\\u03de\", \"\\u03df\", \"\\u03e8\"],\n    t: [\"\\u0141\", \"\\u0166\", \"\\u0373\"],\n    u: [\"\\u01b1\", \"\\u054d\"],\n    v: [\"\\u05d8\"],\n    w: [\"\\u0428\", \"\\u0460\", \"\\u047c\", \"\\u0d70\"],\n    x: [\"\\u04b2\", \"\\u04fe\", \"\\u04fc\", \"\\u04fd\"],\n    y: [\"\\u00a5\", \"\\u04b0\", \"\\u04cb\"],\n    z: [\"\\u01b5\", \"\\u0240\"]\n  }\n  text.forEach(function(c){\n    c = c.toLowerCase();\n    var chars = trap[c] || [\" \"];\n    var rand = Math.floor(Math.random() * chars.length);\n    if (typeof trap[c] !== \"undefined\") {\n      result += trap[c][rand];\n    } else {\n      result += c;\n    }\n  });\n  return result;\n\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/custom/zalgo.js":"// please no\nmodule['exports'] = function zalgo(text, options) {\n  text = text || \"   he is here   \";\n  var soul = {\n    \"up\" : [\n      '̍', '̎', '̄', '̅',\n      '̿', '̑', '̆', '̐',\n      '͒', '͗', '͑', '̇',\n      '̈', '̊', '͂', '̓',\n      '̈', '͊', '͋', '͌',\n      '̃', '̂', '̌', '͐',\n      '̀', '́', '̋', '̏',\n      '̒', '̓', '̔', '̽',\n      '̉', 'ͣ', 'ͤ', 'ͥ',\n      'ͦ', 'ͧ', 'ͨ', 'ͩ',\n      'ͪ', 'ͫ', 'ͬ', 'ͭ',\n      'ͮ', 'ͯ', '̾', '͛',\n      '͆', '̚'\n    ],\n    \"down\" : [\n      '̖', '̗', '̘', '̙',\n      '̜', '̝', '̞', '̟',\n      '̠', '̤', '̥', '̦',\n      '̩', '̪', '̫', '̬',\n      '̭', '̮', '̯', '̰',\n      '̱', '̲', '̳', '̹',\n      '̺', '̻', '̼', 'ͅ',\n      '͇', '͈', '͉', '͍',\n      '͎', '͓', '͔', '͕',\n      '͖', '͙', '͚', '̣'\n    ],\n    \"mid\" : [\n      '̕', '̛', '̀', '́',\n      '͘', '̡', '̢', '̧',\n      '̨', '̴', '̵', '̶',\n      '͜', '͝', '͞',\n      '͟', '͠', '͢', '̸',\n      '̷', '͡', ' ҉'\n    ]\n  },\n  all = [].concat(soul.up, soul.down, soul.mid),\n  zalgo = {};\n\n  function randomNumber(range) {\n    var r = Math.floor(Math.random() * range);\n    return r;\n  }\n\n  function is_char(character) {\n    var bool = false;\n    all.filter(function (i) {\n      bool = (i === character);\n    });\n    return bool;\n  }\n  \n\n  function heComes(text, options) {\n    var result = '', counts, l;\n    options = options || {};\n    options[\"up\"] =   typeof options[\"up\"]   !== 'undefined' ? options[\"up\"]   : true;\n    options[\"mid\"] =  typeof options[\"mid\"]  !== 'undefined' ? options[\"mid\"]  : true;\n    options[\"down\"] = typeof options[\"down\"] !== 'undefined' ? options[\"down\"] : true;\n    options[\"size\"] = typeof options[\"size\"] !== 'undefined' ? options[\"size\"] : \"maxi\";\n    text = text.split('');\n    for (l in text) {\n      if (is_char(l)) {\n        continue;\n      }\n      result = result + text[l];\n      counts = {\"up\" : 0, \"down\" : 0, \"mid\" : 0};\n      switch (options.size) {\n      case 'mini':\n        counts.up = randomNumber(8);\n        counts.mid = randomNumber(2);\n        counts.down = randomNumber(8);\n        break;\n      case 'maxi':\n        counts.up = randomNumber(16) + 3;\n        counts.mid = randomNumber(4) + 1;\n        counts.down = randomNumber(64) + 3;\n        break;\n      default:\n        counts.up = randomNumber(8) + 1;\n        counts.mid = randomNumber(6) / 2;\n        counts.down = randomNumber(8) + 1;\n        break;\n      }\n\n      var arr = [\"up\", \"mid\", \"down\"];\n      for (var d in arr) {\n        var index = arr[d];\n        for (var i = 0 ; i <= counts[index]; i++) {\n          if (options[index]) {\n            result = result + soul[index][randomNumber(soul[index].length)];\n          }\n        }\n      }\n    }\n    return result;\n  }\n  // don't summon him\n  return heComes(text, options);\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/maps/america.js":"var colors = require('../colors');\n\nmodule['exports'] = (function() {\n  return function (letter, i, exploded) {\n    if(letter === \" \") return letter;\n    switch(i%3) {\n      case 0: return colors.red(letter);\n      case 1: return colors.white(letter)\n      case 2: return colors.blue(letter)\n    }\n  }\n})();","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/maps/zebra.js":"var colors = require('../colors');\n\nmodule['exports'] = function (letter, i, exploded) {\n  return i % 2 === 0 ? letter : colors.inverse(letter);\n};","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/maps/rainbow.js":"var colors = require('../colors');\n\nmodule['exports'] = (function () {\n  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']; //RoY G BiV\n  return function (letter, i, exploded) {\n    if (letter === \" \") {\n      return letter;\n    } else {\n      return colors[rainbowColors[i++ % rainbowColors.length]](letter);\n    }\n  };\n})();\n\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/maps/random.js":"var colors = require('../colors');\n\nmodule['exports'] = (function () {\n  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta'];\n  return function(letter, i, exploded) {\n    return letter === \" \" ? letter : colors[available[Math.round(Math.random() * (available.length - 1))]](letter);\n  };\n})();","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/colors/lib/extendStringPrototype.js":"var colors = require('./colors');\n\nmodule['exports'] = function () {\n\n  //\n  // Extends prototype of native string object to allow for \"foo\".red syntax\n  //\n  var addProperty = function (color, func) {\n    String.prototype.__defineGetter__(color, func);\n  };\n\n  var sequencer = function sequencer (map, str) {\n      return function () {\n        var exploded = this.split(\"\"), i = 0;\n        exploded = exploded.map(map);\n        return exploded.join(\"\");\n      }\n  };\n\n  addProperty('strip', function () {\n    return colors.strip(this);\n  });\n\n  addProperty('stripColors', function () {\n    return colors.strip(this);\n  });\n\n  addProperty(\"trap\", function(){\n    return colors.trap(this);\n  });\n\n  addProperty(\"zalgo\", function(){\n    return colors.zalgo(this);\n  });\n\n  addProperty(\"zebra\", function(){\n    return colors.zebra(this);\n  });\n\n  addProperty(\"rainbow\", function(){\n    return colors.rainbow(this);\n  });\n\n  addProperty(\"random\", function(){\n    return colors.random(this);\n  });\n\n  addProperty(\"america\", function(){\n    return colors.america(this);\n  });\n\n  //\n  // Iterate through all default styles and colors\n  //\n  var x = Object.keys(colors.styles);\n  x.forEach(function (style) {\n    addProperty(style, function () {\n      return colors.stylize(this, style);\n    });\n  });\n\n  function applyTheme(theme) {\n    //\n    // Remark: This is a list of methods that exist\n    // on String that you should not overwrite.\n    //\n    var stringPrototypeBlacklist = [\n      '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor',\n      'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt',\n      'indexOf', 'lastIndexof', 'length', 'localeCompare', 'match', 'replace', 'search', 'slice', 'split', 'substring',\n      'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'\n    ];\n\n    Object.keys(theme).forEach(function (prop) {\n      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\\'t want to override. Ignoring style name');\n      }\n      else {\n        if (typeof(theme[prop]) === 'string') {\n          colors[prop] = colors[theme[prop]];\n          addProperty(prop, function () {\n            return colors[theme[prop]](this);\n          });\n        }\n        else {\n          addProperty(prop, function () {\n            var ret = this;\n            for (var t = 0; t < theme[prop].length; t++) {\n              ret = colors[theme[prop][t]](ret);\n            }\n            return ret;\n          });\n        }\n      }\n    });\n  }\n\n  colors.setTheme = function (theme) {\n    if (typeof theme === 'string') {\n      try {\n        colors.themes[theme] = require(theme);\n        applyTheme(colors.themes[theme]);\n        return colors.themes[theme];\n      } catch (err) {\n        console.log(err);\n        return err;\n      }\n    } else {\n      applyTheme(theme);\n    }\n  };\n\n};","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/boolean-helper.js":"'use strict';\n\nmodule.exports = { isFalsey: isFalsey, isTruthy: isTruthy };\n\nfunction isFalsey(variable) {\n  return !variable || variable === 'false' || variable === 'null' || variable === '';\n}\n\nfunction isTruthy(variable) {\n  return !isFalsey(variable);\n}","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/versions.js":"'use strict';\n\nvar _ = require('underscore'),\n    fs = require('fs'),\n    os = require('os'),\n    log = require('./log'),\n    async = require('async'),\n    request = require('request'),\n    spawnSync = require('child_process').spawnSync,\n    selenium = require('selenium-standalone'),\n    chromedriver = require('chromedriver'),\n    booleanHelper = require('./boolean-helper'),\n    processHelper = require('./process-helper.js');\n\nfunction Versions(options) {\n    var _this = this;\n\n    this.options = options;\n\n    this.appDir = '../..';\n    this.chromeDriverExec = chromedriver.path;\n\n    this.show = function (callback) {\n        console.log('Chimp version: ', _this.getChimpVersion());\n        console.log('ChromeDriver version: ', _this.getChromeDriverVersion());\n        console.log('Java version: ', _this.getJavaVersion());\n        console.log('Selenium version: ', _this.getSeleniumVersion());\n        console.log('Selenium drivers version: ', _this.getSeleniumDriversVersion());\n        console.log('OS version: ', _this.getOsVersion());\n        console.log('Node version: ', _this.getNodeVersion());\n        _this.getCurrentBrowserVersion(function (browserVersion) {\n            var currentBrowser = _this.options.browser || 'chrome';\n            console.log('Browser version: ', currentBrowser, browserVersion);\n            if (callback) {\n                callback();\n            }\n        });\n    };\n\n    this.getChimpVersion = function () {\n        var packageJson = require(_this.appDir + '/package.json');\n        return packageJson.version;\n    };\n\n    this.getChromeDriverVersion = function () {\n        if (booleanHelper.isFalsey(_this.options.host)) {\n            if (booleanHelper.isTruthy(_this.options.browser)) {\n                return 'Unknown. Chromedriver not used directly.';\n            } else {\n                return _this._spawnSync(_this.chromeDriverExec + ' -v');\n            }\n        } else {\n            return 'Unknown. Selenium host provided.';\n        }\n    };\n\n    this.getJavaVersion = function () {\n        return _this._spawnSync('java -version');\n    };\n\n    this.getSeleniumVersion = function () {\n        if (_this.options.seleniumStandaloneOptions) {\n            return _this.options.seleniumStandaloneOptions.version;\n        }\n        return \"Unknown.\";\n    };\n\n    this.getSeleniumDriversVersion = function () {\n        if (_this.options.seleniumStandaloneOptions) {\n            var driversVersion = [];\n            var drivers = _this.options.seleniumStandaloneOptions.drivers;\n            _.each(_.keys(drivers), function (driverName) {\n                driversVersion.push(driverName + ': ' + drivers[driverName].version);\n            });\n            return driversVersion.toString().replace(/,/g, ', ');\n        }\n        return \"Unknown.\";\n    };\n\n    this.getOsVersion = function () {\n        return os.type() + ' ' + os.release();\n    };\n\n    this.getNodeVersion = function () {\n        return process.version;\n    };\n\n    this.getCurrentBrowserVersion = function (callback) {\n        if (booleanHelper.isTruthy(_this.options.browser)) {\n            var seleniumOptions = _.clone(_this.options.seleniumStandaloneOptions);\n            seleniumOptions.port = 1;\n\n            async.series([function (cb) {\n                selenium.install(seleniumOptions, function (err, seleniumInstallPaths) {\n                    cb(err, seleniumInstallPaths);\n                });\n            }], function (err, seleniumInstallPaths) {\n                var selectedBrowserDriver = seleniumInstallPaths[0][_this.options.browser];\n                if (selectedBrowserDriver) {\n                    var startBrowserOptions = {\n                        path: selectedBrowserDriver.installPath,\n                        port: _this.options.port\n                    };\n                    _this._startBrowserDriver(startBrowserOptions, function () {\n                        _this._getBrowserVersion(startBrowserOptions, function (err, browserVersion) {\n                            _this._stopBrowserDriver(function (err) {\n                                if (err) {\n                                    log.warn(err);\n                                }\n                                callback(browserVersion);\n                            });\n                        });\n                    });\n                } else {\n                    callback('Driver for selected browser(' + _this.options.browser + ') not found.');\n                }\n            });\n        } else {\n            if (fs.existsSync(_this.chromeDriverExec)) {\n                var startBrowserOptions = {\n                    path: _this.chromeDriverExec,\n                    port: _this.options.port\n                };\n                _this._startBrowserDriver(startBrowserOptions, function () {\n                    _this._getBrowserVersion(startBrowserOptions, function (err, browserVersion) {\n                        _this._stopBrowserDriver(function (err) {\n                            if (err) {\n                                log.warn(err);\n                            }\n                            callback(browserVersion);\n                        });\n                    });\n                });\n            } else {\n                callback('Driver for selected browser not found.');\n            }\n        }\n    };\n\n    // -------------------------------------------------------------------------------------\n\n    this._startBrowserDriver = function (options, callback) {\n        var waitMessage = new RegExp('' + options.port);\n        _this.child = processHelper.start({\n            bin: options.path,\n            prefix: 'browserdriver',\n            args: ['--port=' + options.port],\n            waitForMessage: waitMessage,\n            errorMessage: /Error/\n        }, callback);\n    };\n\n    this._getBrowserVersion = function (options, callback) {\n        var url = 'http://localhost:' + options.port + '/session';\n        var data = { \"desiredCapabilities\": {} };\n\n        request.post({\n            url: url,\n            json: true,\n            body: data\n        }, function (error, response, body) {\n            var data = {};\n            if (!error && response.statusCode === 200) {\n                data.sessionId = body.sessionId;\n                data.browserVersion = body.value.version;\n                request.delete(url + '/' + data.sessionId, function () {\n                    callback(null, data.browserVersion);\n                });\n            } else {\n                error = 'Error connecting to browser driver.';\n                callback(error);\n            }\n        });\n    };\n\n    this._stopBrowserDriver = function (callback) {\n        if (_this.child) {\n            var _options = {\n                child: _this.child,\n                prefix: 'browserdriver'\n            };\n\n            processHelper.kill(_options, function (err, res) {\n                _this.child = null;\n                callback(err, res);\n            });\n        } else {\n            callback(null);\n        }\n    };\n\n    this._spawnSync = function (commandToRun) {\n        var endLine = new RegExp('' + os.EOL, 'g');\n        var commandOptions = commandToRun.split(' ');\n        var command = commandOptions.shift();\n        var commandResult = spawnSync(command, commandOptions);\n        if (commandResult.status !== 0 && commandResult.error) {\n            if (commandResult.error.code === 'ENOENT') {\n                return 'No such file or directory';\n            } else {\n                return 'Error ' + commandResult.error.code;\n            }\n        } else {\n            var commandToReturn = '';\n            _.each(commandResult.output, function (output) {\n                if (output && output.length) {\n                    commandToReturn += output.toString().trim();\n                }\n            });\n            return commandToReturn.replace(endLine, ', ');\n        }\n    };\n}\n\nmodule.exports = Versions;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/process-helper.js":"'use strict';\n\nvar cp = require('child_process'),\n    log = require('./log');\n\nmodule.exports = {\n\n  start: function start(options, callback) {\n\n    var child = this.spawn(options);\n\n    if (options.waitForMessage) {\n      this.waitForMessage(options, child, callback);\n    } else {\n      callback();\n    }\n\n    return child;\n  },\n\n  spawn: function spawn(options) {\n    log.debug('[chimp][' + options.prefix + ']', 'starting process');\n\n    var child = cp.spawn(options.bin, options.args);\n\n    this.logOutputs(options.prefix, child);\n\n    return child;\n  },\n\n  logOutputs: function logOutputs(prefix, child) {\n    child.stdout.on('data', function (data) {\n      log.debug('[chimp][' + prefix + '.stdout]', data.toString());\n    });\n    child.stderr.on('data', function (data) {\n      log.debug('[chimp][' + prefix + '.stderr]', data.toString());\n    });\n  },\n\n  waitForMessage: function waitForMessage(options, child, callback) {\n    child.stderr.on('data', onDataStdErr);\n    child.stdout.on('data', onDataStdOut);\n\n    function onDataStdErr(data) {\n      onData(data, function () {\n        child.stderr.removeListener('data', onDataStdErr);\n      });\n    }\n\n    function onDataStdOut(data) {\n      onData(data, function () {\n        child.stdout.removeListener('data', onDataStdOut);\n      });\n    }\n\n    function onData(data, removeListener) {\n      if (data.toString().match(options.waitForMessage)) {\n        removeListener();\n        log.debug('[chimp][' + options.prefix + ']', 'started successfully');\n        return callback();\n      }\n      if (data.toString().match(options.errorMessage)) {\n        log.error('[chimp][' + options.prefix + ']', 'failed to start');\n        log.error(data.toString());\n        callback(data.toString());\n      }\n    }\n  },\n\n  kill: function kill(options, callback) {\n\n    log.debug('[chimp][' + options.prefix + ']', 'kill called on ' + options.prefix + ' process with pid', options.child.pid);\n\n    options.signal = options.signal || 'SIGTERM';\n\n    try {\n      log.debug('[chimp][' + options.prefix + ']', 'checking if process exists');\n      process.kill(options.child.pid, 0);\n      log.debug('[chimp][' + options.prefix + ']', options.prefix + ' process exists, killing it with', options.signal);\n      process.kill(options.child.pid, options.signal);\n    } catch (e) {\n      log.debug('[chimp][' + options.prefix + ']', options.prefix + ' process does not exists, ignoring');\n      options.child = null;\n      return callback();\n    }\n\n    var delay = 300,\n        totalRetries = 10,\n        retries = totalRetries * (1000 / delay),\n        attempt = 0;\n\n    var waitForProcessToDie = setInterval(function () {\n      try {\n        if (retries-- < 0) {\n          throw new Error('Process took too long to die');\n        }\n        log.debug('[chimp][' + options.prefix + ']', 'waiting for process to die (' + attempt++ + '/' + totalRetries + ')');\n        process.kill(options.child.pid, 0);\n      } catch (e) {\n        clearInterval(waitForProcessToDie);\n        if (e.code === 'ESRCH') {\n          log.debug('[chimp][' + options.prefix + ']', 'process is dead');\n          options.child = null;\n          callback();\n        } else {\n          callback(e);\n        }\n      }\n    }, delay);\n  }\n\n};","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/mocha/mocha.js":"'use strict';\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar path = require('path'),\n    cp = require('child-process-debug'),\n    processHelper = require('./../process-helper.js'),\n    booleanHelper = require('../boolean-helper'),\n    log = require('./../log'),\n    _ = require('underscore'),\n    colors = require('colors'),\n    glob = require('glob'),\n    fs = require('fs-extra');\n\n/**\n * Mocha Constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Mocha(options) {\n  this.options = options;\n  this.child = null;\n}\n\n/**\n * Run Mocha specs\n *\n * @param {Function} callback\n * @api public\n */\n\nMocha.prototype.start = function (callback) {\n\n  var self = this;\n  if (glob.sync(self.options.path).length === 0) {\n    var infoMessage = '[chimp][mocha] Directory ' + self.options.path + ' does not exist. Not running';\n    if (booleanHelper.isTruthy(self.options['fail-when-no-tests-run'])) {\n      callback(infoMessage);\n    } else {\n      log.info(infoMessage);\n      callback();\n    }\n    return;\n  }\n\n  log.debug('[chimp][mocha] Running...');\n\n  var opts = {\n    env: process.env,\n    silent: true\n  };\n\n  var port;\n  if (this.options.debugMocha) {\n    port = parseInt(this.options.debugMocha);\n    if (port > 1) {\n      opts.execArgv = ['--debug=' + port];\n    } else {\n      opts.execArgv = ['--debug'];\n    }\n  }\n\n  if (this.options.debugBrkMocha) {\n    port = parseInt(this.options.debugBrkMocha);\n    if (port > 1) {\n      opts.execArgv = ['--debug-brk=' + port];\n    } else {\n      opts.execArgv = ['--debug-brk'];\n    }\n  }\n\n  var _specs = [];\n  if (this.options._.length > 2) {\n    _specs = this.options._.slice(2);\n  }\n\n  opts.env = _.extend(process.env, {\n    mochaConfig: (0, _stringify2.default)(this.options.mochaConfig)\n  });\n  self.child = cp.fork(path.join(__dirname, 'mocha-wrapper-instance.js'), _specs, opts);\n  self.child.stdout.pipe(process.stdout);\n  self.child.stderr.pipe(process.stderr);\n  process.stdin.pipe(self.child.stdin);\n\n  var noTestsFound = false;\n  self.child.stdout.on('data', function (data) {\n    var colorCodesRegExp = new RegExp('\\x1B\\\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]', 'g');\n    var dataFromStdout = data.toString().replace(colorCodesRegExp, '').trim();\n    if (/^0 passing/.test(dataFromStdout)) {\n      noTestsFound = true;\n    }\n  });\n\n  var result = null;\n  self.child.on('message', function (res) {\n    log.debug('[chimp][mocha] Received message from Mocha child. Result:', res);\n    result = res;\n  });\n\n  self.child.on('close', function (code) {\n    log.debug('[chimp][mocha] Closed with code', code);\n    var failWhenNoTestsRun = booleanHelper.isTruthy(self.options['fail-when-no-tests-run']);\n    if (!self.child.stopping) {\n      log.debug('[chimp][mocha] Mocha not in a stopping state');\n      callback(code !== 0 || code === 0 && noTestsFound && failWhenNoTestsRun ? 'Mocha failed' : null, result);\n    }\n  });\n};\n\nMocha.prototype.interrupt = function (callback) {\n\n  log.debug('[chimp][mocha] interrupting mocha');\n\n  var self = this;\n\n  if (!self.child) {\n    log.debug('[chimp][mocha] no child to interrupt');\n    return callback();\n  }\n  self.child.stopping = true;\n\n  var options = {\n    child: self.child,\n    prefix: 'mocha'\n  };\n\n  processHelper.kill(options, function (err, res) {\n    self.child = null;\n    if (callback) {\n      callback(err, res);\n    }\n  });\n};\n\nmodule.exports = Mocha;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/glob/glob.js":"// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\nmodule.exports = glob\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar inherits = require('inherits')\nvar EE = require('events').EventEmitter\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar globSync = require('./sync.js')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar inflight = require('inflight')\nvar util = require('util')\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nvar once = require('once')\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === 'function') cb = options, options = {}\n  if (!options) options = {}\n\n  if (options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return globSync(pattern, options)\n  }\n\n  return new Glob(pattern, options, cb)\n}\n\nglob.sync = globSync\nvar GlobSync = glob.GlobSync = globSync.GlobSync\n\n// old api surface\nglob.glob = glob\n\nfunction extend (origin, add) {\n  if (add === null || typeof add !== 'object') {\n    return origin\n  }\n\n  var keys = Object.keys(add)\n  var i = keys.length\n  while (i--) {\n    origin[keys[i]] = add[keys[i]]\n  }\n  return origin\n}\n\nglob.hasMagic = function (pattern, options_) {\n  var options = extend({}, options_)\n  options.noprocess = true\n\n  var g = new Glob(pattern, options)\n  var set = g.minimatch.set\n\n  if (!pattern)\n    return false\n\n  if (set.length > 1)\n    return true\n\n  for (var j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== 'string')\n      return true\n  }\n\n  return false\n}\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = null\n  }\n\n  if (options && options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return new GlobSync(pattern, options)\n  }\n\n  if (!(this instanceof Glob))\n    return new Glob(pattern, options, cb)\n\n  setopts(this, pattern, options)\n  this._didRealPath = false\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  if (typeof cb === 'function') {\n    cb = once(cb)\n    this.on('error', cb)\n    this.on('end', function (matches) {\n      cb(null, matches)\n    })\n  }\n\n  var self = this\n  var n = this.minimatch.set.length\n  this._processing = 0\n  this.matches = new Array(n)\n\n  this._emitQueue = []\n  this._processQueue = []\n  this.paused = false\n\n  if (this.noprocess)\n    return this\n\n  if (n === 0)\n    return done()\n\n  var sync = true\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false, done)\n  }\n  sync = false\n\n  function done () {\n    --self._processing\n    if (self._processing <= 0) {\n      if (sync) {\n        process.nextTick(function () {\n          self._finish()\n        })\n      } else {\n        self._finish()\n      }\n    }\n  }\n}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n  if (this.aborted)\n    return\n\n  if (this.realpath && !this._didRealpath)\n    return this._realpath()\n\n  common.finish(this)\n  this.emit('end', this.found)\n}\n\nGlob.prototype._realpath = function () {\n  if (this._didRealpath)\n    return\n\n  this._didRealpath = true\n\n  var n = this.matches.length\n  if (n === 0)\n    return this._finish()\n\n  var self = this\n  for (var i = 0; i < this.matches.length; i++)\n    this._realpathSet(i, next)\n\n  function next () {\n    if (--n === 0)\n      self._finish()\n  }\n}\n\nGlob.prototype._realpathSet = function (index, cb) {\n  var matchset = this.matches[index]\n  if (!matchset)\n    return cb()\n\n  var found = Object.keys(matchset)\n  var self = this\n  var n = found.length\n\n  if (n === 0)\n    return cb()\n\n  var set = this.matches[index] = Object.create(null)\n  found.forEach(function (p, i) {\n    // If there's a problem with the stat, then it means that\n    // one or more of the links in the realpath couldn't be\n    // resolved.  just return the abs value in that case.\n    p = self._makeAbs(p)\n    rp.realpath(p, self.realpathCache, function (er, real) {\n      if (!er)\n        set[real] = true\n      else if (er.syscall === 'stat')\n        set[p] = true\n      else\n        self.emit('error', er) // srsly wtf right here\n\n      if (--n === 0) {\n        self.matches[index] = set\n        cb()\n      }\n    })\n  })\n}\n\nGlob.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlob.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit('abort')\n}\n\nGlob.prototype.pause = function () {\n  if (!this.paused) {\n    this.paused = true\n    this.emit('pause')\n  }\n}\n\nGlob.prototype.resume = function () {\n  if (this.paused) {\n    this.emit('resume')\n    this.paused = false\n    if (this._emitQueue.length) {\n      var eq = this._emitQueue.slice(0)\n      this._emitQueue.length = 0\n      for (var i = 0; i < eq.length; i ++) {\n        var e = eq[i]\n        this._emitMatch(e[0], e[1])\n      }\n    }\n    if (this._processQueue.length) {\n      var pq = this._processQueue.slice(0)\n      this._processQueue.length = 0\n      for (var i = 0; i < pq.length; i ++) {\n        var p = pq[i]\n        this._processing--\n        this._process(p[0], p[1], p[2], p[3])\n      }\n    }\n  }\n}\n\nGlob.prototype._process = function (pattern, index, inGlobStar, cb) {\n  assert(this instanceof Glob)\n  assert(typeof cb === 'function')\n\n  if (this.aborted)\n    return\n\n  this._processing++\n  if (this.paused) {\n    this._processQueue.push([pattern, index, inGlobStar, cb])\n    return\n  }\n\n  //console.error('PROCESS %d', this._processing, pattern)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index, cb)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip _processing\n  if (childrenIgnored(this, read))\n    return cb()\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)\n}\n\nGlob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\nGlob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return cb()\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return cb()\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return cb()\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix) {\n      if (prefix !== '/')\n        e = prefix + '/' + e\n      else\n        e = prefix + e\n    }\n    this._process([e].concat(remain), index, inGlobStar, cb)\n  }\n  cb()\n}\n\nGlob.prototype._emitMatch = function (index, e) {\n  if (this.aborted)\n    return\n\n  if (isIgnored(this, e))\n    return\n\n  if (this.paused) {\n    this._emitQueue.push([index, e])\n    return\n  }\n\n  var abs = isAbsolute(e) ? e : this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute)\n    e = abs\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  var st = this.statCache[abs]\n  if (st)\n    this.emit('stat', e, st)\n\n  this.emit('match', e)\n}\n\nGlob.prototype._readdirInGlobStar = function (abs, cb) {\n  if (this.aborted)\n    return\n\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false, cb)\n\n  var lstatkey = 'lstat\\0' + abs\n  var self = this\n  var lstatcb = inflight(lstatkey, lstatcb_)\n\n  if (lstatcb)\n    fs.lstat(abs, lstatcb)\n\n  function lstatcb_ (er, lstat) {\n    if (er && er.code === 'ENOENT')\n      return cb()\n\n    var isSym = lstat && lstat.isSymbolicLink()\n    self.symlinks[abs] = isSym\n\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && lstat && !lstat.isDirectory()) {\n      self.cache[abs] = 'FILE'\n      cb()\n    } else\n      self._readdir(abs, false, cb)\n  }\n}\n\nGlob.prototype._readdir = function (abs, inGlobStar, cb) {\n  if (this.aborted)\n    return\n\n  cb = inflight('readdir\\0'+abs+'\\0'+inGlobStar, cb)\n  if (!cb)\n    return\n\n  //console.error('RD %j %j', +inGlobStar, abs)\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs, cb)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return cb()\n\n    if (Array.isArray(c))\n      return cb(null, c)\n  }\n\n  var self = this\n  fs.readdir(abs, readdirCb(this, abs, cb))\n}\n\nfunction readdirCb (self, abs, cb) {\n  return function (er, entries) {\n    if (er)\n      self._readdirError(abs, er, cb)\n    else\n      self._readdirEntries(abs, entries, cb)\n  }\n}\n\nGlob.prototype._readdirEntries = function (abs, entries, cb) {\n  if (this.aborted)\n    return\n\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n  return cb(null, entries)\n}\n\nGlob.prototype._readdirError = function (f, er, cb) {\n  if (this.aborted)\n    return\n\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        this.emit('error', error)\n        this.abort()\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n\n  return cb()\n}\n\nGlob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\n\nGlob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n  //console.error('pgs2', prefix, remain[0], entries)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return cb()\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false, cb)\n\n  var isSym = this.symlinks[abs]\n  var len = entries.length\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return cb()\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true, cb)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true, cb)\n  }\n\n  cb()\n}\n\nGlob.prototype._processSimple = function (prefix, index, cb) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var self = this\n  this._stat(prefix, function (er, exists) {\n    self._processSimple2(prefix, index, er, exists, cb)\n  })\n}\nGlob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {\n\n  //console.error('ps2', prefix, exists)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return cb()\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n  cb()\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlob.prototype._stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return cb()\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return cb(null, c)\n\n    if (needDir && c === 'FILE')\n      return cb()\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (stat !== undefined) {\n    if (stat === false)\n      return cb(null, stat)\n    else {\n      var type = stat.isDirectory() ? 'DIR' : 'FILE'\n      if (needDir && type === 'FILE')\n        return cb()\n      else\n        return cb(null, type, stat)\n    }\n  }\n\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb_)\n  if (statcb)\n    fs.lstat(abs, statcb)\n\n  function lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n    this.statCache[abs] = false\n    return cb()\n  }\n\n  var needDir = f.slice(-1) === '/'\n  this.statCache[abs] = stat\n\n  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())\n    return cb(null, false, stat)\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return cb()\n\n  return cb(null, c, stat)\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/fs.realpath/index.js":"module.exports = realpath\nrealpath.realpath = realpath\nrealpath.sync = realpathSync\nrealpath.realpathSync = realpathSync\nrealpath.monkeypatch = monkeypatch\nrealpath.unmonkeypatch = unmonkeypatch\n\nvar fs = require('fs')\nvar origRealpath = fs.realpath\nvar origRealpathSync = fs.realpathSync\n\nvar version = process.version\nvar ok = /^v[0-5]\\./.test(version)\nvar old = require('./old.js')\n\nfunction newError (er) {\n  return er && er.syscall === 'realpath' && (\n    er.code === 'ELOOP' ||\n    er.code === 'ENOMEM' ||\n    er.code === 'ENAMETOOLONG'\n  )\n}\n\nfunction realpath (p, cache, cb) {\n  if (ok) {\n    return origRealpath(p, cache, cb)\n  }\n\n  if (typeof cache === 'function') {\n    cb = cache\n    cache = null\n  }\n  origRealpath(p, cache, function (er, result) {\n    if (newError(er)) {\n      old.realpath(p, cache, cb)\n    } else {\n      cb(er, result)\n    }\n  })\n}\n\nfunction realpathSync (p, cache) {\n  if (ok) {\n    return origRealpathSync(p, cache)\n  }\n\n  try {\n    return origRealpathSync(p, cache)\n  } catch (er) {\n    if (newError(er)) {\n      return old.realpathSync(p, cache)\n    } else {\n      throw er\n    }\n  }\n}\n\nfunction monkeypatch () {\n  fs.realpath = realpath\n  fs.realpathSync = realpathSync\n}\n\nfunction unmonkeypatch () {\n  fs.realpath = origRealpath\n  fs.realpathSync = origRealpathSync\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/fs.realpath/old.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\n\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error;\n    callback = debugCallback;\n  } else\n    callback = missingCallback;\n\n  return callback;\n\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation)\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation)\n          console.trace(msg);\n        else\n          console.error(msg);\n      }\n    }\n  }\n}\n\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\n\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\n\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      continue;\n    }\n\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n\n  if (cache) cache[original] = p;\n\n  return p;\n};\n\n\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      return process.nextTick(LOOP);\n    }\n\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return cb(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/minimatch/minimatch.js":"module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long')\n  }\n\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/brace-expansion/index.js":"var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/concat-map/index.js":"module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/balanced-match/index.js":"module.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/inherits/inherits.js":"try {\n  var util = require('util');\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  module.exports = require('./inherits_browser.js');\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/path-is-absolute/index.js":"'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n}\n\nfunction win32(path) {\n\t// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = Boolean(device && device.charAt(1) !== ':');\n\n\t// UNC paths are always absolute\n\treturn Boolean(result[2] || isUnc);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/glob/sync.js":"module.exports = globSync\nglobSync.GlobSync = GlobSync\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar Glob = require('./glob.js').Glob\nvar util = require('util')\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nfunction globSync (pattern, options) {\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  return new GlobSync(pattern, options).found\n}\n\nfunction GlobSync (pattern, options) {\n  if (!pattern)\n    throw new Error('must provide pattern')\n\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  if (!(this instanceof GlobSync))\n    return new GlobSync(pattern, options)\n\n  setopts(this, pattern, options)\n\n  if (this.noprocess)\n    return this\n\n  var n = this.minimatch.set.length\n  this.matches = new Array(n)\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false)\n  }\n  this._finish()\n}\n\nGlobSync.prototype._finish = function () {\n  assert(this instanceof GlobSync)\n  if (this.realpath) {\n    var self = this\n    this.matches.forEach(function (matchset, index) {\n      var set = self.matches[index] = Object.create(null)\n      for (var p in matchset) {\n        try {\n          p = self._makeAbs(p)\n          var real = rp.realpathSync(p, self.realpathCache)\n          set[real] = true\n        } catch (er) {\n          if (er.syscall === 'stat')\n            set[self._makeAbs(p)] = true\n          else\n            throw er\n        }\n      }\n    })\n  }\n  common.finish(this)\n}\n\n\nGlobSync.prototype._process = function (pattern, index, inGlobStar) {\n  assert(this instanceof GlobSync)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // See if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip processing\n  if (childrenIgnored(this, read))\n    return\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)\n}\n\n\nGlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {\n  var entries = this._readdir(abs, inGlobStar)\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix.slice(-1) !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix)\n      newPattern = [prefix, e]\n    else\n      newPattern = [e]\n    this._process(newPattern.concat(remain), index, inGlobStar)\n  }\n}\n\n\nGlobSync.prototype._emitMatch = function (index, e) {\n  if (isIgnored(this, e))\n    return\n\n  var abs = this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute) {\n    e = abs\n  }\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  if (this.stat)\n    this._stat(e)\n}\n\n\nGlobSync.prototype._readdirInGlobStar = function (abs) {\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false)\n\n  var entries\n  var lstat\n  var stat\n  try {\n    lstat = fs.lstatSync(abs)\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      // lstat failed, doesn't exist\n      return null\n    }\n  }\n\n  var isSym = lstat && lstat.isSymbolicLink()\n  this.symlinks[abs] = isSym\n\n  // If it's not a symlink or a dir, then it's definitely a regular file.\n  // don't bother doing a readdir in that case.\n  if (!isSym && lstat && !lstat.isDirectory())\n    this.cache[abs] = 'FILE'\n  else\n    entries = this._readdir(abs, false)\n\n  return entries\n}\n\nGlobSync.prototype._readdir = function (abs, inGlobStar) {\n  var entries\n\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return null\n\n    if (Array.isArray(c))\n      return c\n  }\n\n  try {\n    return this._readdirEntries(abs, fs.readdirSync(abs))\n  } catch (er) {\n    this._readdirError(abs, er)\n    return null\n  }\n}\n\nGlobSync.prototype._readdirEntries = function (abs, entries) {\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n\n  // mark and cache dir-ness\n  return entries\n}\n\nGlobSync.prototype._readdirError = function (f, er) {\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        throw error\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n}\n\nGlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {\n\n  var entries = this._readdir(abs, inGlobStar)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false)\n\n  var len = entries.length\n  var isSym = this.symlinks[abs]\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true)\n  }\n}\n\nGlobSync.prototype._processSimple = function (prefix, index) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var exists = this._stat(prefix)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlobSync.prototype._stat = function (f) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return false\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return c\n\n    if (needDir && c === 'FILE')\n      return false\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (!stat) {\n    var lstat\n    try {\n      lstat = fs.lstatSync(abs)\n    } catch (er) {\n      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n        this.statCache[abs] = false\n        return false\n      }\n    }\n\n    if (lstat && lstat.isSymbolicLink()) {\n      try {\n        stat = fs.statSync(abs)\n      } catch (er) {\n        stat = lstat\n      }\n    } else {\n      stat = lstat\n    }\n  }\n\n  this.statCache[abs] = stat\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return false\n\n  return c\n}\n\nGlobSync.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlobSync.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/glob/common.js":"exports.alphasort = alphasort\nexports.alphasorti = alphasorti\nexports.setopts = setopts\nexports.ownProp = ownProp\nexports.makeAbs = makeAbs\nexports.finish = finish\nexports.mark = mark\nexports.isIgnored = isIgnored\nexports.childrenIgnored = childrenIgnored\n\nfunction ownProp (obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field)\n}\n\nvar path = require(\"path\")\nvar minimatch = require(\"minimatch\")\nvar isAbsolute = require(\"path-is-absolute\")\nvar Minimatch = minimatch.Minimatch\n\nfunction alphasorti (a, b) {\n  return a.toLowerCase().localeCompare(b.toLowerCase())\n}\n\nfunction alphasort (a, b) {\n  return a.localeCompare(b)\n}\n\nfunction setupIgnores (self, options) {\n  self.ignore = options.ignore || []\n\n  if (!Array.isArray(self.ignore))\n    self.ignore = [self.ignore]\n\n  if (self.ignore.length) {\n    self.ignore = self.ignore.map(ignoreMap)\n  }\n}\n\n// ignore patterns are always in dot:true mode.\nfunction ignoreMap (pattern) {\n  var gmatcher = null\n  if (pattern.slice(-3) === '/**') {\n    var gpattern = pattern.replace(/(\\/\\*\\*)+$/, '')\n    gmatcher = new Minimatch(gpattern, { dot: true })\n  }\n\n  return {\n    matcher: new Minimatch(pattern, { dot: true }),\n    gmatcher: gmatcher\n  }\n}\n\nfunction setopts (self, pattern, options) {\n  if (!options)\n    options = {}\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\")\n    }\n    pattern = \"**/\" + pattern\n  }\n\n  self.silent = !!options.silent\n  self.pattern = pattern\n  self.strict = options.strict !== false\n  self.realpath = !!options.realpath\n  self.realpathCache = options.realpathCache || Object.create(null)\n  self.follow = !!options.follow\n  self.dot = !!options.dot\n  self.mark = !!options.mark\n  self.nodir = !!options.nodir\n  if (self.nodir)\n    self.mark = true\n  self.sync = !!options.sync\n  self.nounique = !!options.nounique\n  self.nonull = !!options.nonull\n  self.nosort = !!options.nosort\n  self.nocase = !!options.nocase\n  self.stat = !!options.stat\n  self.noprocess = !!options.noprocess\n  self.absolute = !!options.absolute\n\n  self.maxLength = options.maxLength || Infinity\n  self.cache = options.cache || Object.create(null)\n  self.statCache = options.statCache || Object.create(null)\n  self.symlinks = options.symlinks || Object.create(null)\n\n  setupIgnores(self, options)\n\n  self.changedCwd = false\n  var cwd = process.cwd()\n  if (!ownProp(options, \"cwd\"))\n    self.cwd = cwd\n  else {\n    self.cwd = path.resolve(options.cwd)\n    self.changedCwd = self.cwd !== cwd\n  }\n\n  self.root = options.root || path.resolve(self.cwd, \"/\")\n  self.root = path.resolve(self.root)\n  if (process.platform === \"win32\")\n    self.root = self.root.replace(/\\\\/g, \"/\")\n\n  // TODO: is an absolute `cwd` supposed to be resolved against `root`?\n  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd)\n  if (process.platform === \"win32\")\n    self.cwdAbs = self.cwdAbs.replace(/\\\\/g, \"/\")\n  self.nomount = !!options.nomount\n\n  // disable comments and negation in Minimatch.\n  // Note that they are not supported in Glob itself anyway.\n  options.nonegate = true\n  options.nocomment = true\n\n  self.minimatch = new Minimatch(pattern, options)\n  self.options = self.minimatch.options\n}\n\nfunction finish (self) {\n  var nou = self.nounique\n  var all = nou ? [] : Object.create(null)\n\n  for (var i = 0, l = self.matches.length; i < l; i ++) {\n    var matches = self.matches[i]\n    if (!matches || Object.keys(matches).length === 0) {\n      if (self.nonull) {\n        // do like the shell, and spit out the literal glob\n        var literal = self.minimatch.globSet[i]\n        if (nou)\n          all.push(literal)\n        else\n          all[literal] = true\n      }\n    } else {\n      // had matches\n      var m = Object.keys(matches)\n      if (nou)\n        all.push.apply(all, m)\n      else\n        m.forEach(function (m) {\n          all[m] = true\n        })\n    }\n  }\n\n  if (!nou)\n    all = Object.keys(all)\n\n  if (!self.nosort)\n    all = all.sort(self.nocase ? alphasorti : alphasort)\n\n  // at *some* point we statted all of these\n  if (self.mark) {\n    for (var i = 0; i < all.length; i++) {\n      all[i] = self._mark(all[i])\n    }\n    if (self.nodir) {\n      all = all.filter(function (e) {\n        var notDir = !(/\\/$/.test(e))\n        var c = self.cache[e] || self.cache[makeAbs(self, e)]\n        if (notDir && c)\n          notDir = c !== 'DIR' && !Array.isArray(c)\n        return notDir\n      })\n    }\n  }\n\n  if (self.ignore.length)\n    all = all.filter(function(m) {\n      return !isIgnored(self, m)\n    })\n\n  self.found = all\n}\n\nfunction mark (self, p) {\n  var abs = makeAbs(self, p)\n  var c = self.cache[abs]\n  var m = p\n  if (c) {\n    var isDir = c === 'DIR' || Array.isArray(c)\n    var slash = p.slice(-1) === '/'\n\n    if (isDir && !slash)\n      m += '/'\n    else if (!isDir && slash)\n      m = m.slice(0, -1)\n\n    if (m !== p) {\n      var mabs = makeAbs(self, m)\n      self.statCache[mabs] = self.statCache[abs]\n      self.cache[mabs] = self.cache[abs]\n    }\n  }\n\n  return m\n}\n\n// lotta situps...\nfunction makeAbs (self, f) {\n  var abs = f\n  if (f.charAt(0) === '/') {\n    abs = path.join(self.root, f)\n  } else if (isAbsolute(f) || f === '') {\n    abs = f\n  } else if (self.changedCwd) {\n    abs = path.resolve(self.cwd, f)\n  } else {\n    abs = path.resolve(f)\n  }\n\n  if (process.platform === 'win32')\n    abs = abs.replace(/\\\\/g, '/')\n\n  return abs\n}\n\n\n// Return true, if pattern ends with globstar '**', for the accompanying parent directory.\n// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents\nfunction isIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n\nfunction childrenIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/inflight/inflight.js":"var wrappy = require('wrappy')\nvar reqs = Object.create(null)\nvar once = require('once')\n\nmodule.exports = wrappy(inflight)\n\nfunction inflight (key, cb) {\n  if (reqs[key]) {\n    reqs[key].push(cb)\n    return null\n  } else {\n    reqs[key] = [cb]\n    return makeres(key)\n  }\n}\n\nfunction makeres (key) {\n  return once(function RES () {\n    var cbs = reqs[key]\n    var len = cbs.length\n    var args = slice(arguments)\n\n    // XXX It's somewhat ambiguous whether a new callback added in this\n    // pass should be queued for later execution if something in the\n    // list of callbacks throws, or if it should just be discarded.\n    // However, it's such an edge case that it hardly matters, and either\n    // choice is likely as surprising as the other.\n    // As it happens, we do go ahead and schedule it for later execution.\n    try {\n      for (var i = 0; i < len; i++) {\n        cbs[i].apply(null, args)\n      }\n    } finally {\n      if (cbs.length > len) {\n        // added more in the interim.\n        // de-zalgo, just in case, but don't call again.\n        cbs.splice(0, len)\n        process.nextTick(function () {\n          RES.apply(null, args)\n        })\n      } else {\n        delete reqs[key]\n      }\n    }\n  })\n}\n\nfunction slice (args) {\n  var length = args.length\n  var array = []\n\n  for (var i = 0; i < length; i++) array[i] = args[i]\n  return array\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/wrappy/wrappy.js":"// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/node_modules/once/once.js":"module.exports = once\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/jasmine/jasmine.js":"'use strict';\n\nvar path = require('path'),\n    cp = require('child-process-debug'),\n    processHelper = require('./../process-helper.js'),\n    booleanHelper = require('../boolean-helper'),\n    log = require('./../log'),\n    _ = require('underscore'),\n    colors = require('colors'),\n    glob = require('glob'),\n    fs = require('fs-extra');\n\n/**\n * Mocha Constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Jasmine(options) {\n  this.options = options;\n  this.child = null;\n}\n\n/**\n * Run Mocha specs\n *\n * @param {Function} callback\n * @api public\n */\n\nJasmine.prototype.start = function (callback) {\n\n  var self = this;\n  if (glob.sync(self.options.path).length === 0) {\n    var infoMessage = '[chimp][jasmine] Directory ' + self.options.path + ' does not exist. Not running';\n    if (booleanHelper.isTruthy(this.options['fail-when-no-tests-run'])) {\n      callback(infoMessage);\n    } else {\n      log.info(infoMessage);\n      callback();\n    }\n    return;\n  }\n\n  log.debug('[chimp][jasmine] Running...');\n\n  var opts = {\n    env: process.env,\n    silent: true\n  };\n\n  var port;\n  if (this.options.debugJasmine) {\n    port = parseInt(this.options.debugJasmine);\n    if (port > 1) {\n      opts.execArgv = ['--debug=' + port];\n    } else {\n      opts.execArgv = ['--debug'];\n    }\n  }\n\n  if (this.options.debugBrkMocha) {\n    port = parseInt(this.options.debugBrkMocha);\n    if (port > 1) {\n      opts.execArgv = ['--debug-brk=' + port];\n    } else {\n      opts.execArgv = ['--debug-brk'];\n    }\n  }\n\n  self.child = cp.fork(path.join(__dirname, 'jasmine-wrapper.js'), [], opts);\n\n  self.child.stdout.pipe(process.stdout);\n  self.child.stderr.pipe(process.stderr);\n  process.stdin.pipe(self.child.stdin);\n\n  var noTestsFound = false;\n  self.child.stdout.on('data', function (data) {\n    var colorCodesRegExp = new RegExp('\\x1B\\\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]', 'g');\n    var dataFromStdout = data.toString().replace(colorCodesRegExp, '').trim();\n    if (/^No specs found/.test(dataFromStdout)) {\n      noTestsFound = true;\n    }\n  });\n\n  var result = null;\n  self.child.on('message', function (res) {\n    log.debug('[chimp][jasmine] Received message from Jasmine child. Result:', res);\n    result = res;\n  });\n\n  self.child.on('close', function (code) {\n    log.debug('[chimp][jasmine] Closed with code', code);\n    var failWhenNoTestsRun = booleanHelper.isTruthy(self.options['fail-when-no-tests-run']);\n    if (!self.child.stopping) {\n      log.debug('[chimp][jasmine] Jasmine not in a stopping state');\n      callback(code !== 0 || code === 0 && noTestsFound && failWhenNoTestsRun ? 'Jasmine failed' : null, result);\n    }\n  });\n};\n\nJasmine.prototype.interrupt = function (callback) {\n\n  log.debug('[chimp][jasmine] interrupting jasmine');\n\n  var self = this;\n\n  if (!self.child) {\n    log.debug('[chimp][jasmine] no child to interrupt');\n    return callback();\n  }\n  self.child.stopping = true;\n\n  var options = {\n    child: self.child,\n    prefix: 'jasmine'\n  };\n\n  processHelper.kill(options, function (err, res) {\n    self.child = null;\n    if (callback) {\n      callback(err, res);\n    }\n  });\n};\n\nmodule.exports = Jasmine;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/cucumberjs/cucumber.js":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar path = require('path');\nvar cp = require('child-process-debug');\nvar processHelper = require('./../process-helper.js');\nvar log = require('./../log');\nvar _ = require('underscore');\nvar booleanHelper = require('../boolean-helper');\nvar fs = require('fs-extra');\n\n/**\n * Run Cucumber specs\n *\n * @param {Function} callback\n * @api public\n */\n\nvar Cucumber = function () {\n  function Cucumber(options) {\n    (0, _classCallCheck3.default)(this, Cucumber);\n\n    this.options = options;\n    this.cucumberChild = null;\n  }\n\n  (0, _createClass3.default)(Cucumber, [{\n    key: 'start',\n    value: function start(callback) {\n      var _this = this;\n\n      var args = this._getExecOptions(this.options);\n\n      if (!fs.existsSync(this.options.path)) {\n        var infoMessage = '[chimp][cucumber] Directory ' + this.options.path + ' does not exist. Not running';\n        if (booleanHelper.isTruthy(this.options['fail-when-no-tests-run'])) {\n          callback(infoMessage);\n        } else {\n          log.info(infoMessage);\n          callback();\n        }\n        return;\n      }\n\n      log.debug('[chimp][cucumber] Running with', args);\n\n      var opts = {\n        env: process.env,\n        silent: true\n      };\n\n      var port = void 0;\n      if (booleanHelper.isTruthy(this.options.debugCucumber)) {\n        port = parseInt(this.options.debugCucumber, 10);\n        if (port > 1) {\n          opts.execArgv = ['--debug=' + port];\n        } else {\n          opts.execArgv = ['--debug'];\n        }\n      }\n\n      if (booleanHelper.isTruthy(this.options.debugBrkCucumber)) {\n        port = parseInt(this.options.debugBrkCucumber, 10);\n        if (port > 1) {\n          opts.execArgv = ['--debug-brk=' + port];\n        } else {\n          opts.execArgv = ['--debug-brk'];\n        }\n      }\n\n      this.cucumberChild = cp.fork(path.join(__dirname, 'cucumber-wrapper.js'), args, opts);\n\n      if (booleanHelper.isTruthy(this.options.conditionOutput)) {\n        this.cucumberChild.stdout.on('data', function (data) {\n          _this._conditionMessage(data.toString());\n        });\n      } else {\n        this.cucumberChild.stdout.pipe(process.stdout);\n      }\n\n      this.cucumberChild.stderr.pipe(process.stderr);\n      process.stdin.pipe(this.cucumberChild.stdin);\n\n      var jsonResults = null;\n      this.cucumberChild.on('message', function (res) {\n        log.debug('[chimp][cucumber] Received message from cucumber child. Result:', res);\n        jsonResults = res;\n      });\n\n      this.cucumberChild.on('close', function (code) {\n        log.debug('[chimp][cucumber] Closed with code', code);\n\n        if (!_this.cucumberChild.stopping) {\n          log.debug('[chimp][cucumber] Cucumber not in a stopping state');\n\n          if (_this.options.jsonOutput && jsonResults && JSON.parse(jsonResults).length) {\n            var dir = path.dirname(_this.options.jsonOutput);\n            log.debug('[chimp][cucumber] Ensuring directory exists', dir);\n            fs.mkdirsSync(dir);\n            log.debug('[chimp][cucumber] Writing json results to', _this.options.jsonOutput);\n            fs.writeFileSync(_this.options.jsonOutput, jsonResults);\n            log.debug('[chimp][cucumber] Finished writing results');\n          }\n\n          var failWhenNoTestsRun = booleanHelper.isTruthy(_this.options['fail-when-no-tests-run']);\n          var noTestsFound = JSON.parse(jsonResults).length === 0;\n\n          callback(code !== 0 || code === 0 && noTestsFound && failWhenNoTestsRun ? 'Cucumber steps failed' : null, jsonResults);\n        }\n      });\n    }\n  }, {\n    key: 'interrupt',\n    value: function interrupt(callback) {\n      var _this2 = this;\n\n      log.debug('[chimp][cucumber] interrupting cucumber');\n\n      if (!this.cucumberChild) {\n        log.debug('[chimp][cucumber] no child to interrupt');\n        return callback();\n      }\n      this.cucumberChild.stopping = true;\n\n      var options = {\n        child: this.cucumberChild,\n        prefix: 'cucumber'\n      };\n\n      processHelper.kill(options, function (err, res) {\n        _this2.cucumberChild = null;\n        if (callback) {\n          callback(err, res);\n        }\n      });\n    }\n  }, {\n    key: '_getRecommendedFilename',\n    value: function _getRecommendedFilename(line) {\n      var stepType = line.match(/this\\.(Given|When|Then)/)[1];\n      var recommendedFilename = stepType + ' ' + line.match(/\\^(.*)\\$/)[1];\n      recommendedFilename = recommendedFilename.replace(/\".*\"/g, '#');\n      recommendedFilename = recommendedFilename.replace(/\\(.*\\)/g, '#');\n      recommendedFilename = recommendedFilename.replace(/\\\\/g, '');\n      recommendedFilename = recommendedFilename.replace(/\\$/g, '');\n      recommendedFilename = recommendedFilename.replace(/ /g, this.options.recommendedFilenameSeparator || ' ');\n      return recommendedFilename;\n    }\n  }, {\n    key: '_conditionOutput',\n    value: function _conditionOutput(message) {\n      if (message.indexOf('callback.pending()') === -1) {\n        process.stdout.write(message);\n        return;\n      }\n\n      try {\n        var defaultText = 'Write code here that turns the phrase above into concrete actions';\n        var replacementText = 'Write the automation code here';\n        var tab = '';\n        var self = this;\n        _.each(message.split('\\n'), function (eachLine) {\n          if (booleanHelper.isTruthy(self.options.singleSnippetPerFile) && eachLine.match(/this\\./)) {\n            process.stdout.write('// Recommended filename: '.gray + (self._getRecommendedFilename(eachLine) + '.js\\n').cyan);\n            process.stdout.write('module.exports = function() {\\n'.yellow);\n            tab = '  ';\n          }\n          var line = eachLine;\n          line = line.replace(defaultText, replacementText);\n          line = line.replace('callback.pending()', 'pending()');\n          line = line.replace(', callback', '');\n          line = line.replace('callback', '');\n          process.stdout.write(tab + line + '\\n');\n          if (booleanHelper.isTruthy(self.options.singleSnippetPerFile) && line.match(/}\\);/)) {\n            process.stdout.write('};\\n'.yellow);\n            tab = '';\n          }\n        });\n      } catch (e) {\n        log.debug('[chimp][cucumber] Error conditioning message', e);\n        process.stdout.write(message);\n      }\n    }\n  }, {\n    key: '_conditionMessage',\n    value: function _conditionMessage(message) {\n      if (this.options.debug) {\n        log.debug(message);\n        return;\n      }\n\n      // output any strings that don't contain a stack trace\n      if (message.indexOf('  at') === -1) {\n        this._conditionOutput(message);\n        return;\n      }\n\n      var msg = '';\n      var basePath = path.resolve('.', this.options.path);\n      var basePathParent = path.resolve(basePath, '..');\n      var TAB = '    ';\n\n      try {\n        _.each(message.split('\\n'), function (line) {\n          var trimmedLine = line.trim();\n          var relativePathLine = line.replace(basePathParent + path.sep, '');\n          // filter out some known unnecessary lines\n          // console.error('[' + line + ']');\n          if (trimmedLine.indexOf('node_modules') !== -1) {\n            return;\n          }\n          // for stack trace lines\n          if (trimmedLine.indexOf('at') === 0) {\n            msg += relativePathLine.yellow + '\\n';\n          } else {\n            // or other lines that start with a tab (cucumber repeats errors at the end)\n            if (line.indexOf(TAB) !== -1) {\n              msg += relativePathLine.yellow + '\\n';\n            } else {\n              msg += relativePathLine.magenta + '\\n';\n            }\n          }\n        });\n\n        process.stdout.write(msg);\n      } catch (e) {\n        log.debug('[chimp][cucumber] Error conditioning console out', e);\n        process.stdout.write(message);\n      }\n    }\n  }, {\n    key: '_getExecOptions',\n    value: function _getExecOptions(options) {\n      var execOptions = ['node', path.resolve(__dirname, path.join('..', '..', '..', 'node_modules', '.bin', 'cucumber.js'))];\n\n      // XXX a feature may be defined at the start or end\n      // XXX do other options also get passed with this command?\n      var features = options._.splice(2).toString() || options.features || options.path;\n      if (features.indexOf(',') !== -1) {\n        features = features.split(',');\n        _.each(features, function (feature) {\n          execOptions.push(feature);\n        });\n      } else {\n        execOptions.push(features);\n      }\n\n      execOptions.push('-r');\n      execOptions.push(path.resolve(__dirname, path.join('../chimp-helper.js')));\n      execOptions.push('-r');\n      execOptions.push(path.resolve(__dirname, path.join('world.js')));\n      if (!options.domainOnly) {\n        execOptions.push('-r');\n        execOptions.push(path.resolve(__dirname, path.join('hooks.js')));\n      }\n\n      if (!options.r && !options.require) {\n        execOptions.push('-r');\n        execOptions.push(options.path);\n      }\n\n      // See: https://github.com/cucumber/cucumber-js/blob/v0.9.2/lib/cucumber/cli.js\n      var allowedCucumberJsOptions = {\n        long: ['version', 'backtrace', 'compiler', 'dry-run', 'fail-fast', 'format', 'no-colors', 'no-snippets', 'no-source', 'profile', 'require', 'snippet-syntax', 'strict', 'tags', 'help'],\n        short: ['v', 'b', 'd', 'f', 'p', 'r', 'S', 't']\n      };\n\n      _.forEach(options, function (eachOptionValues, optionName) {\n        var optionValues = _.isArray(eachOptionValues) ? eachOptionValues : [eachOptionValues];\n\n        if (_.contains(allowedCucumberJsOptions.long, optionName)) {\n          _.forEach(optionValues, function (optionValue) {\n            execOptions.push('--' + optionName);\n            if (['dry-run', 'fail-fast', 'no-colors', 'no-snippets', 'no-source', 'strict', 'backtrace'].indexOf(optionName) === -1) {\n              execOptions.push(optionValue.toString());\n            }\n          });\n        } else if (_.contains(allowedCucumberJsOptions.short, optionName)) {\n          _.forEach(optionValues, function (optionValue) {\n            execOptions.push('-' + optionName);\n            if (['d', 'S', 'b'].indexOf(optionName) === -1) {\n              execOptions.push(optionValue.toString());\n            }\n          });\n        } else if (_.last(optionValues) === false && _.contains(allowedCucumberJsOptions.long, 'no-' + optionName)) {\n          execOptions.push('--no-' + optionName);\n        }\n      });\n\n      log.debug('[chimp][cucumber] Cucumber exec options are: ', execOptions);\n      return execOptions;\n    }\n  }]);\n  return Cucumber;\n}();\n\nmodule.exports = Cucumber;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/phantom.js":"'use strict';\n\nvar phantomjs = require('phantomjs-prebuilt'),\n    processHelper = require('./process-helper.js'),\n    log = require('./log');\n\n/**\n * Phantom Constructor\n *\n * @param {Object} options\n * @api public\n */\nfunction Phantom(options) {\n  if (!options) {\n    throw new Error('options is required');\n  }\n\n  if (!options.port) {\n    throw new Error('options.port is required');\n  }\n\n  this.options = options;\n\n  this.child = null;\n}\n\n/**\n * Start Phantom\n *\n * @param {Function} callback\n * @api public\n */\nPhantom.prototype.start = function (callback) {\n  var self = this;\n  var port = self.options.port;\n  var ignoreSSLErrors = self.options.phantom_ignoreSSLErrors || 'false';\n\n  if (this.child) {\n    callback();\n    return;\n  }\n\n  this.child = processHelper.start({\n    bin: process.env['chimp.phantom_path'] || phantomjs.path,\n    prefix: 'phantom',\n    args: ['--webdriver', port, '--ignore-ssl-errors', ignoreSSLErrors],\n    waitForMessage: /GhostDriver - Main - running on port/,\n    errorMessage: /Error/\n  }, callback);\n};\n\n/**\n * Stop Phantom\n *\n * @param {Function} callback\n * @api public\n */\nPhantom.prototype.stop = function (callback) {\n  var self = this;\n\n  if (self.child) {\n    log.debug('[chimp][phantom] stopping process');\n\n    var options = {\n      child: self.child,\n      prefix: 'phantom'\n    };\n\n    processHelper.kill(options, function (err, res) {\n      self.child = null;\n      callback(err, res);\n    });\n  } else {\n    log.debug('[chimp][phantom] no process to kill');\n    callback(null);\n  }\n};\n\n/**\n * Interrupt Phantom\n *\n * @param {Function} callback\n * @api public\n */\nPhantom.prototype.interrupt = function (callback) {\n  this.stop(callback);\n};\n\nmodule.exports = Phantom;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/chromedriver.js":"'use strict';\n\nvar chromedriver = require('chromedriver'),\n    processHelper = require('./process-helper.js'),\n    fs = require('fs'),\n    log = require('./log');\n\n/**\n * Chromedriver Constructor\n *\n * @param {Object} options\n * @api public\n */\nfunction Chromedriver(options) {\n    if (!options) {\n        throw new Error('options is required');\n    }\n\n    if (!options.port) {\n        throw new Error('options.port is required');\n    }\n\n    this.options = options;\n\n    this.child = null;\n}\n\n/**\n * Start Chromedriver\n *\n * @param {Function} callback\n * @api public\n */\nChromedriver.prototype.start = function (callback) {\n    var self = this;\n    var port = self.options.port;\n\n    if (this.child) {\n        callback();\n        return;\n    }\n\n    var chromedriverPath = chromedriver.path;\n\n    if (fs.existsSync(chromedriverPath)) {\n        this.child = processHelper.start({\n            bin: chromedriverPath,\n            prefix: 'chromedriver',\n            args: ['--port=' + port, '--url-base=wd/hub'],\n            waitForMessage: /Starting ChromeDriver/,\n            errorMessage: /Error/\n        }, callback);\n    } else {\n        callback('[chimp][chromedriver] Chromedriver executable not found.');\n    }\n};\n\n/**\n * Stop Chromedriver\n *\n * @param {Function} callback\n * @api public\n */\nChromedriver.prototype.stop = function (callback) {\n    var self = this;\n\n    if (self.child) {\n        log.debug('[chimp][chromedriver] stopping process');\n\n        var options = {\n            child: self.child,\n            prefix: 'chromedriver'\n        };\n\n        processHelper.kill(options, function (err, res) {\n            self.child = null;\n            callback(err, res);\n        });\n    } else {\n        log.debug('[chimp][chromedriver] no process to kill');\n        callback(null);\n    }\n};\n\n/**\n * Interrupt Chromedriver\n *\n * @param {Function} callback\n * @api public\n */\nChromedriver.prototype.interrupt = function (callback) {\n    log.debug('[chimp][chromedriver] interrupt called');\n    if (!this.options['watch'] || !!this.options['clean-chromedriver-server']) {\n        this.stop(callback);\n    } else {\n        log.debug('[chimp][chromedriver] interrupt is not killing chromedriver because ' + 'clean-chromedriver-server not set');\n        callback(null);\n    }\n};\n\nmodule.exports = Chromedriver;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/consoler.js":"'use strict';\n\n/**\n * Consoler Constructor\n *\n * @param {Object} options\n * @api public\n */\nfunction Consoler(message, color) {\n  this.color = color || 'black';\n  this.message = message;\n}\n\n/**\n * Start Consoler\n *\n * @param {Function} callback\n * @api public\n */\nConsoler.prototype.start = function (callback) {\n  console.log(this.message);\n  callback();\n};\n\n/**\n * Stop Consoler\n *\n * @param {Function} callback\n * @api public\n */\nConsoler.prototype.stop = function (callback) {\n  callback();\n};\n\n/**\n * Interrupt Consoler\n *\n * @param {Function} callback\n * @api public\n */\nConsoler.prototype.interrupt = function (callback) {\n  callback();\n};\n\nmodule.exports = Consoler;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/selenium.js":"'use strict';\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _ = require('underscore'),\n    processHelper = require('./process-helper.js'),\n    selenium = require('selenium-standalone'),\n    booleanHelper = require('./boolean-helper'),\n    log = require('./log');\n\n/**\n * Selenium Constructor\n *\n * @param {Object} options\n * @api public\n */\nfunction Selenium(options) {\n\n  if (!options) {\n    throw new Error('options is required');\n  }\n\n  if (booleanHelper.isFalsey(options.port)) {\n    throw new Error('options.port is required');\n  }\n\n  this.options = _.clone(options);\n\n  this.seleniumStandaloneOptions = options.seleniumStandaloneOptions;\n\n  if (!this.options['clean-selenium-server']) {\n    // poor-man's singleton is enough for our needs\n    if ((0, _typeof3.default)(Selenium.instance) === 'object') {\n      log.debug('[chimp][selenium]', 'Selenium object already exists, not creating a new one');\n      return Selenium.instance;\n    }\n    log.debug('[chimp][selenium]', 'Selenium object created');\n    Selenium.instance = this;\n  }\n\n  this.options.port = String(options.port);\n  this.child = null;\n}\n\n/**\n * Installs Selenium and drivers.\n *\n * @param {Function} callback\n * @api public\n */\nSelenium.prototype.install = function (callback) {\n  var ProgressBar = require('progress');\n  var bar;\n  var firstProgress = true;\n\n  if (this.options.offline) {\n    log.debug('[chimp][selenium]', 'Offline mode enabled, Chimp will not attempt to install Selenium & Drivers');\n    callback();\n    return;\n  }\n\n  log.debug('[chimp][selenium]', 'Installing Selenium + drivers if needed');\n\n  this.seleniumStandaloneOptions.progressCb = progressCb;\n\n  selenium.install(this.seleniumStandaloneOptions, function (e, r) {\n    if (e && e.message.match(/Error: getaddrinfo ENOTFOUND/)) {\n      log.debug('[chimp][selenium]', e.message);\n      log.info('[chimp][selenium] Detected a connection error in selenium-standalone. Are you offline?');\n      log.info('[chimp][selenium] Consider using the --offline option to explicitly skip installing Selenium & drivers.');\n      log.info('[chimp][selenium] Attempting to continue...');\n      callback(null, r);\n    } else {\n      callback(e, r);\n    }\n  });\n\n  function progressCb(total, progress, chunk) {\n    if (firstProgress) {\n      firstProgress = false;\n    }\n\n    bar = bar || new ProgressBar('selenium-standalone installation [:bar] :percent :etas', {\n      total: total,\n      complete: '=',\n      incomplete: ' ',\n      width: 20\n    });\n\n    bar.tick(chunk);\n  }\n};\n\n/**\n * Start Selenium process.\n *\n * It also installs Selenium if necessary.\n *\n * @param {Function} callback\n * @api public\n */\nSelenium.prototype.start = function (callback) {\n  var self = this;\n  var port = self.options.port;\n\n  log.debug('[chimp][selenium]', 'Start');\n\n  if (self.child) {\n    log.debug('[chimp][selenium]', 'Already running, doing nothing');\n    callback(null);\n    return;\n  }\n\n  self.install(function (error) {\n    if (error) {\n      log.error('[selenium]', error);\n      callback(error);\n      return;\n    }\n\n    if (!self.seleniumStandaloneOptions.seleniumArgs) {\n      self.seleniumStandaloneOptions.seleniumArgs = [];\n    }\n    self.seleniumStandaloneOptions.seleniumArgs.push('-port', port);\n\n    if (process.env['chimp.log'] === 'verbose' || process.env['chimp.log'] === 'debug') {\n      self.options.seleniumDebug = true;\n    }\n\n    if (self.options.seleniumDebug) {\n      self.seleniumStandaloneOptions.seleniumArgs.push('-debug');\n    }\n\n    log.debug('\\n[chimp][selenium] hub can be seen at http://localhost:' + port + '/wd/hub');\n\n    selenium.start(self.seleniumStandaloneOptions, function (error, seleniumChild) {\n\n      self.child = seleniumChild;\n\n      if (error) {\n        callback(error);\n        return;\n      }\n\n      if (self.options.seleniumDebug) {\n        processHelper.logOutputs('selenium', self.child);\n      }\n\n      process.on('exit', function () {\n        log.debug('[chimp][selenium] process exit event detected. Stopping process');\n        self.stop(function () {\n          log.debug('[chimp][selenium] process exit event stop complete');\n        });\n      });\n\n      callback(null);\n    });\n  });\n};\n\nSelenium.prototype.stop = function (callback) {\n\n  var self = this;\n\n  if (self.child) {\n\n    log.debug('[chimp][selenium] killing active session');\n\n    var options = {\n      child: self.child,\n      prefix: 'selenium',\n      signal: 'SIGINT'\n    };\n\n    log.debug('[chimp][selenium] stopping process');\n    processHelper.kill(options, function (err, res) {\n      self.child = null;\n      callback(err, res);\n    });\n  } else {\n    log.debug('[chimp][selenium] no process to kill');\n    callback(null);\n  }\n};\n\nSelenium.prototype.interrupt = function (callback) {\n  log.debug('[chimp][selenium] interrupt called');\n  if (!this.options['watch'] || !!this.options['clean-selenium-server']) {\n    this.stop(callback);\n  } else {\n    log.debug('[chimp][selenium] interrupt is not killing selenium because ' + 'clean-selenium-server not set');\n    callback(null);\n  }\n};\n\nmodule.exports = Selenium;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/dist/lib/simian-reporter.js":"'use strict';\n\nvar _request = require('request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _log = require('./log');\n\nvar _log2 = _interopRequireDefault(_log);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * SimianReporter Constructor\n *\n * @param {Object} options\n * @api public\n */\nfunction SimianReporter(options) {\n  this.options = options;\n\n  // FIXME: We need a way to isolate instance in jest tests, until then this allows asserions\n  SimianReporter.instance = this;\n}\n\nSimianReporter.prototype.report = function report(jsonCucumberResult, callback) {\n  var query = {\n    accessToken: this.options.simianAccessToken\n  };\n  if (this.options.simianRepositoryId) {\n    query.repositoryId = this.options.simianRepositoryId;\n  }\n  var url = require('url').format({\n    protocol: 'http',\n    host: this.options.simianResultEndPoint,\n    query: query\n  });\n\n  var data = {\n    type: 'cucumber',\n    branch: this.options.simianResultBranch,\n    result: jsonCucumberResult\n  };\n  if (this.options.simianBuildNumber) {\n    data.buildNumber = parseInt(this.options.simianBuildNumber, 10);\n  }\n\n  _request2.default.post({\n    url: url,\n    json: true,\n    body: data\n  }, function (error, response, body) {\n    if (!error && response.statusCode === 200) {\n      _log2.default.debug('[chimp][simian-reporter]', 'received data', body);\n    } else {\n      if (body) {\n        _log2.default.error('[chimp][simian-reporter] Error from Simian:', body.error);\n      } else {\n        _log2.default.error('[chimp][simian-reporter]', 'Error while sending result to Simian:', error);\n      }\n    }\n    callback(error);\n  });\n};\n\nmodule.exports = SimianReporter;","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/chimp.js":"module.exports = {\n  // - - - - CHIMP - - - -\n  watch: false,\n  watchTags: '@watch',\n  offline: false,\n\n  // - - - - CUCUMBER - - - -\n  path: './features',\n\n  jsonOutput: 'output.json',\n\n  // '- - - - DEBUGGING  - - - -\n  log: 'info',\n  debug: false,\n  seleniumDebug: false,\n  webdriverLogLevel: false,\n  // debugBrkCucumber: 5858,\n};\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/index.js":"module.exports = require('./dist/index');\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/mocha-setup.js":"(function () {\n  const chai = require('chai');\n  chai.should();\n  global.expect = chai.expect;\n  global.assert = chai.assert;\n\n  const td = require('testdouble');\n  const quibble = require('quibble');\n  global.td = td;\n\n  beforeEach(() => {\n    td.reset();\n    quibble.ignoreCallsFromThisFile(require.main.filename);\n  });\n})();\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/wallaby.js":"module.exports = function (wallaby) {\n\n  var fs = require('fs');\n  var path = require('path');\n  var babel = require('babel-core');\n  var babelConfig = JSON.parse(\n    fs.readFileSync(path.join(__dirname, '.babelrc'))\n  );\n  babelConfig.babel = babel;\n\n  return {\n    files: [\n      'src/bin/*.js',\n      'src/lib/**/*.js',\n      'src/__mocks__/*.js'\n    ],\n\n    tests: [\n      'src/__tests__/*.js'\n    ],\n\n    compilers: {\n      '**/*.js': wallaby.compilers.babel(babelConfig)\n    },\n\n    env: {\n      type: 'node',\n      params: {\n        runner: '--harmony'\n      }\n    },\n\n    testFramework: 'jest',\n\n    bootstrap: function (wallaby) {\n      var path = require('path');\n      var packageConfigPath = path.resolve(wallaby.localProjectDir, 'package.json');\n      var packageConfig = require(packageConfigPath);\n      var jestConfig = packageConfig.jest;\n      delete jestConfig.scriptPreprocessor;\n      wallaby.testFramework.configure(jestConfig);\n    },\n\n    debug: true\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/wallaby-mocha.js":"module.exports = (wallaby) => {\n  const path = require('path');\n  const packageJson = require(`${wallaby.localProjectDir}/package.json`);\n  return {\n    debug: false,\n    testFramework: 'mocha',\n    files: packageJson.mocha.files,\n    tests: packageJson.mocha.tests,\n    compilers: {'**/*.js': wallaby.compilers.babel()},\n    env: {type: 'node'},\n    workers: {initial: 1, regular: 1, recycle: true},\n    setup: () => {\n      wallaby.testFramework.addFile(`${wallaby.localProjectDir}/mocha-setup.js`);\n    },\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/features/step_definitions/es2015-steps.js":"module.exports = function () {\n\n  this.When(/^I use ES2015$/, function () {\n    const {a, b} = {a: 'foo', b: 'bar'};\n    const arrowFunc = (foo) => foo;\n    class Foo {\n      constructor() {}\n      foo() {}\n    }\n    var object = {\n      foo() {}\n    };\n    const templateString = `Foo`;\n    const [c, ,d] = [1,2,3];\n  });\n\n  this.When(/^it works$/, function () {});\n\n};\n","/home/travis/build/npmtest/node-npmtest-chimp/node_modules/chimp/features/step_definitions/webdriver-steps.js":"var myStepDefinitionsWrapper = function () {\n\n  this.When(/^I visit \"([^\"]*)\"$/, function (url) {\n    browser.url(url);\n  });\n\n  this.Then(/^I see the title of \"([^\"]*)\"$/, function (title) {\n    expect(browser.getTitle()).toEqual(title);\n  });\n\n};\nmodule.exports = myStepDefinitionsWrapper;\n"}